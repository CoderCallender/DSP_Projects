
DSPmini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e24  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006fac  08006fac  00007fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  0800739c  0800739c  0000839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a4  080073a4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073a8  080073a8  000083a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080073ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000900c  2**0
                  CONTENTS
 10 .bss          0000047c  2000000c  2000000c  0000900c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000488  20000488  0000900c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010717  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280d  00000000  00000000  00019753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  0001bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cce  00000000  00000000  0001cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a65  00000000  00000000  0001dc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015296  00000000  00000000  0003f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d12f3  00000000  00000000  00054989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125c7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004784  00000000  00000000  00125cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0012a444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f94 	.word	0x08006f94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006f94 	.word	0x08006f94

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96a 	b.w	8000b20 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	460c      	mov	r4, r1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d14e      	bne.n	800090e <__udivmoddi4+0xaa>
 8000870:	4694      	mov	ip, r2
 8000872:	458c      	cmp	ip, r1
 8000874:	4686      	mov	lr, r0
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	d962      	bls.n	8000942 <__udivmoddi4+0xde>
 800087c:	b14a      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	4091      	lsls	r1, r2
 8000884:	fa20 f303 	lsr.w	r3, r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	4319      	orrs	r1, r3
 800088e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000892:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000896:	fa1f f68c 	uxth.w	r6, ip
 800089a:	fbb1 f4f7 	udiv	r4, r1, r7
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb07 1114 	mls	r1, r7, r4, r1
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb04 f106 	mul.w	r1, r4, r6
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ba:	f080 8112 	bcs.w	8000ae2 <__udivmoddi4+0x27e>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 810f 	bls.w	8000ae2 <__udivmoddi4+0x27e>
 80008c4:	3c02      	subs	r4, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a59      	subs	r1, r3, r1
 80008ca:	fa1f f38e 	uxth.w	r3, lr
 80008ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d2:	fb07 1110 	mls	r1, r7, r0, r1
 80008d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008da:	fb00 f606 	mul.w	r6, r0, r6
 80008de:	429e      	cmp	r6, r3
 80008e0:	d90a      	bls.n	80008f8 <__udivmoddi4+0x94>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ea:	f080 80fc 	bcs.w	8000ae6 <__udivmoddi4+0x282>
 80008ee:	429e      	cmp	r6, r3
 80008f0:	f240 80f9 	bls.w	8000ae6 <__udivmoddi4+0x282>
 80008f4:	4463      	add	r3, ip
 80008f6:	3802      	subs	r0, #2
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa6>
 8000902:	40d3      	lsrs	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xba>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb4>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa6>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x150>
 8000926:	42a3      	cmp	r3, r4
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xcc>
 800092a:	4290      	cmp	r0, r2
 800092c:	f0c0 80f0 	bcc.w	8000b10 <__udivmoddi4+0x2ac>
 8000930:	1a86      	subs	r6, r0, r2
 8000932:	eb64 0303 	sbc.w	r3, r4, r3
 8000936:	2001      	movs	r0, #1
 8000938:	2d00      	cmp	r5, #0
 800093a:	d0e6      	beq.n	800090a <__udivmoddi4+0xa6>
 800093c:	e9c5 6300 	strd	r6, r3, [r5]
 8000940:	e7e3      	b.n	800090a <__udivmoddi4+0xa6>
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8090 	bne.w	8000a68 <__udivmoddi4+0x204>
 8000948:	eba1 040c 	sub.w	r4, r1, ip
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	fa1f f78c 	uxth.w	r7, ip
 8000954:	2101      	movs	r1, #1
 8000956:	fbb4 f6f8 	udiv	r6, r4, r8
 800095a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095e:	fb08 4416 	mls	r4, r8, r6, r4
 8000962:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000966:	fb07 f006 	mul.w	r0, r7, r6
 800096a:	4298      	cmp	r0, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x11c>
 800096e:	eb1c 0303 	adds.w	r3, ip, r3
 8000972:	f106 34ff 	add.w	r4, r6, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x11a>
 8000978:	4298      	cmp	r0, r3
 800097a:	f200 80cd 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 800097e:	4626      	mov	r6, r4
 8000980:	1a1c      	subs	r4, r3, r0
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb4 f0f8 	udiv	r0, r4, r8
 800098a:	fb08 4410 	mls	r4, r8, r0, r4
 800098e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000992:	fb00 f707 	mul.w	r7, r0, r7
 8000996:	429f      	cmp	r7, r3
 8000998:	d908      	bls.n	80009ac <__udivmoddi4+0x148>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x146>
 80009a4:	429f      	cmp	r7, r3
 80009a6:	f200 80b0 	bhi.w	8000b0a <__udivmoddi4+0x2a6>
 80009aa:	4620      	mov	r0, r4
 80009ac:	1bdb      	subs	r3, r3, r7
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x9c>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c4:	fa04 f301 	lsl.w	r3, r4, r1
 80009c8:	ea43 030c 	orr.w	r3, r3, ip
 80009cc:	40f4      	lsrs	r4, r6
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	0c38      	lsrs	r0, r7, #16
 80009d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d8:	fbb4 fef0 	udiv	lr, r4, r0
 80009dc:	fa1f fc87 	uxth.w	ip, r7
 80009e0:	fb00 441e 	mls	r4, r0, lr, r4
 80009e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e8:	fb0e f90c 	mul.w	r9, lr, ip
 80009ec:	45a1      	cmp	r9, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d90a      	bls.n	8000a0a <__udivmoddi4+0x1a6>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fa:	f080 8084 	bcs.w	8000b06 <__udivmoddi4+0x2a2>
 80009fe:	45a1      	cmp	r9, r4
 8000a00:	f240 8081 	bls.w	8000b06 <__udivmoddi4+0x2a2>
 8000a04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a08:	443c      	add	r4, r7
 8000a0a:	eba4 0409 	sub.w	r4, r4, r9
 8000a0e:	fa1f f983 	uxth.w	r9, r3
 8000a12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a16:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a22:	45a4      	cmp	ip, r4
 8000a24:	d907      	bls.n	8000a36 <__udivmoddi4+0x1d2>
 8000a26:	193c      	adds	r4, r7, r4
 8000a28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a2c:	d267      	bcs.n	8000afe <__udivmoddi4+0x29a>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0x29a>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	429c      	cmp	r4, r3
 8000a44:	46ce      	mov	lr, r9
 8000a46:	469c      	mov	ip, r3
 8000a48:	d351      	bcc.n	8000aee <__udivmoddi4+0x28a>
 8000a4a:	d04e      	beq.n	8000aea <__udivmoddi4+0x286>
 8000a4c:	b155      	cbz	r5, 8000a64 <__udivmoddi4+0x200>
 8000a4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a52:	eb64 040c 	sbc.w	r4, r4, ip
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	40cb      	lsrs	r3, r1
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	40cc      	lsrs	r4, r1
 8000a60:	e9c5 6400 	strd	r6, r4, [r5]
 8000a64:	2100      	movs	r1, #0
 8000a66:	e750      	b.n	800090a <__udivmoddi4+0xa6>
 8000a68:	f1c2 0320 	rsb	r3, r2, #32
 8000a6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	fa24 f303 	lsr.w	r3, r4, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a84:	fa1f f78c 	uxth.w	r7, ip
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a90:	0c23      	lsrs	r3, r4, #16
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f107 	mul.w	r1, r0, r7
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x24c>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aa6:	d22c      	bcs.n	8000b02 <__udivmoddi4+0x29e>
 8000aa8:	4299      	cmp	r1, r3
 8000aaa:	d92a      	bls.n	8000b02 <__udivmoddi4+0x29e>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ab8:	fb08 3311 	mls	r3, r8, r1, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb01 f307 	mul.w	r3, r1, r7
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x276>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad0:	d213      	bcs.n	8000afa <__udivmoddi4+0x296>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d911      	bls.n	8000afa <__udivmoddi4+0x296>
 8000ad6:	3902      	subs	r1, #2
 8000ad8:	4464      	add	r4, ip
 8000ada:	1ae4      	subs	r4, r4, r3
 8000adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae0:	e739      	b.n	8000956 <__udivmoddi4+0xf2>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	e6f0      	b.n	80008c8 <__udivmoddi4+0x64>
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e706      	b.n	80008f8 <__udivmoddi4+0x94>
 8000aea:	45c8      	cmp	r8, r9
 8000aec:	d2ae      	bcs.n	8000a4c <__udivmoddi4+0x1e8>
 8000aee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000af6:	3801      	subs	r0, #1
 8000af8:	e7a8      	b.n	8000a4c <__udivmoddi4+0x1e8>
 8000afa:	4631      	mov	r1, r6
 8000afc:	e7ed      	b.n	8000ada <__udivmoddi4+0x276>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e799      	b.n	8000a36 <__udivmoddi4+0x1d2>
 8000b02:	4630      	mov	r0, r6
 8000b04:	e7d4      	b.n	8000ab0 <__udivmoddi4+0x24c>
 8000b06:	46d6      	mov	lr, sl
 8000b08:	e77f      	b.n	8000a0a <__udivmoddi4+0x1a6>
 8000b0a:	4463      	add	r3, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e74d      	b.n	80009ac <__udivmoddi4+0x148>
 8000b10:	4606      	mov	r6, r0
 8000b12:	4623      	mov	r3, r4
 8000b14:	4608      	mov	r0, r1
 8000b16:	e70f      	b.n	8000938 <__udivmoddi4+0xd4>
 8000b18:	3e02      	subs	r6, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	e730      	b.n	8000980 <__udivmoddi4+0x11c>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <IIR_peakingFilter_init>:
 */

#include "IIR_PeakingFilter.h"

void IIR_peakingFilter_init(IIR_peakingFilter *filt, float sampleRate_Hz)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	ed87 0a00 	vstr	s0, [r7]
	//calculate the sample time
	filt ->sampleTime_s = 1.0f / sampleRate_Hz;
 8000b30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000b34:	ed97 7a00 	vldr	s14, [r7]
 8000b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	edc3 7a00 	vstr	s15, [r3]

	//clear filter memory
	for (uint8_t n = 0; n < 3; n++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e012      	b.n	8000b6e <IIR_peakingFilter_init+0x4a>
	{
		filt -> x[n] = 0.0f;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	3304      	adds	r3, #4
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
		filt -> y[n] = 0.0f;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; n++)
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d9e9      	bls.n	8000b48 <IIR_peakingFilter_init+0x24>
	}

	//set all parameters for an all pass filter
	IIR_peakingFilter_setParams(filt, 1.0f, 0.0f, 1.0f);
 8000b74:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000b78:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8000b90 <IIR_peakingFilter_init+0x6c>
 8000b7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f809 	bl	8000b98 <IIR_peakingFilter_setParams>

	//temporary test code, set a bass boost (boostcut max = 2.0)
	//IIR_peakingFilter_setParams(filt, 8000.0f, 50.0f, 2.0f);
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
	...

08000b98 <IIR_peakingFilter_setParams>:


//function to compute the parameters of the IIR filter. If boostCut_linear > 1, boost. If less than 1, cut
void IIR_peakingFilter_setParams(IIR_peakingFilter *filt, float centreFreq_Hz, float bandwidth_Hz, float boostCut_linear)
{
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ba4:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ba8:	ed87 1a00 	vstr	s2, [r7]
	//convert Hz to radians/sec, pre warp cut-off frequency (bilinear transform), multiply by sampling time
	float wcT = 2.0f * tanf( M_PI * centreFreq_Hz * filt ->sampleTime_s);
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fd99 	bl	80006e4 <__aeabi_f2d>
 8000bb2:	a35b      	add	r3, pc, #364	@ (adr r3, 8000d20 <IIR_peakingFilter_setParams+0x188>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	f7ff fb06 	bl	80001c8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4614      	mov	r4, r2
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd8b 	bl	80006e4 <__aeabi_f2d>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	4629      	mov	r1, r5
 8000bd6:	f7ff faf7 	bl	80001c8 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff fdd7 	bl	8000794 <__aeabi_d2f>
 8000be6:	4603      	mov	r3, r0
 8000be8:	ee00 3a10 	vmov	s0, r3
 8000bec:	f005 fc72 	bl	80064d4 <tanf>
 8000bf0:	eef0 7a40 	vmov.f32	s15, s0
 8000bf4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bf8:	edc7 7a05 	vstr	s15, [r7, #20]

	//calculate Q
	float Q = centreFreq_Hz / bandwidth_Hz;
 8000bfc:	edd7 6a02 	vldr	s13, [r7, #8]
 8000c00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c08:	edc7 7a04 	vstr	s15, [r7, #16]

	//calculate filter coefficients
	filt -> a[0] = 4.0f + 2.0f * (boostCut_linear / Q) * wcT + wcT * wcT;
 8000c0c:	edd7 6a00 	vldr	s13, [r7]
 8000c10:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c18:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c24:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	edc3 7a07 	vstr	s15, [r3, #28]
	filt -> a[1] = 2.0f * wcT * wcT - 8.0f;
 8000c3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	edc3 7a08 	vstr	s15, [r3, #32]
	filt -> a[2] = 4.0f - 2.0f * (boostCut_linear / Q) * wcT + wcT * wcT;
 8000c5c:	edd7 6a00 	vldr	s13, [r7]
 8000c60:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c74:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000c78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	filt -> b[0] = 1.0f / (4.0f + 2.0f / Q * wcT + wcT * wcT);
 8000c8e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	filt -> b[1] = -(2.0f * wcT  * wcT - 8.0f);
 8000cc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cdc:	eef1 7a67 	vneg.f32	s15, s15
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	filt -> b[2] = -(4.0f - 2.0f / Q * wcT + wcT * wcT);
 8000ce6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0e:	eef1 7a67 	vneg.f32	s15, s15
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d20:	54442d18 	.word	0x54442d18
 8000d24:	400921fb 	.word	0x400921fb

08000d28 <IIR_peakingFilter_update>:

float IIR_peakingFilter_update(IIR_peakingFilter *filt, float in)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	ed87 0a00 	vstr	s0, [r7]
	//shift input samples
	filt ->x[2] = filt ->x[1];
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	60da      	str	r2, [r3, #12]
	filt ->x[1] = filt ->x[0];
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
	filt ->x[0] = in;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	605a      	str	r2, [r3, #4]

	//shift output samples
	filt ->y[2] = filt ->y[1];
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	619a      	str	r2, [r3, #24]
	filt ->y[1] = filt ->y[0];
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	615a      	str	r2, [r3, #20]

	//calculate new filter output
	filt ->y[0] = (filt -> a[0] * filt -> x[0] + filt -> a[1] * filt -> x[1] + filt -> a[2] * filt -> x[2]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	edd3 6a08 	vldr	s13, [r3, #32]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ (filt -> b[1] * filt -> y[1] + filt -> b[2] * filt -> y[2])) * filt -> b[0];
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
	filt ->y[0] = (filt -> a[0] * filt -> x[0] + filt -> a[1] * filt -> x[1] + filt -> a[2] * filt -> x[2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	edc3 7a04 	vstr	s15, [r3, #16]

	return (filt -> y[0]);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	ee07 3a90 	vmov	s15, r3
}
 8000dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <codec_read_register>:
#include "main.h"

//Function to read one register from the codec
//inputs = I2C handle (eg i2c1 or i2c2 etc), register address to be read, pointer to the data to be stored
HAL_StatusTypeDef codec_read_register(I2C_HandleTypeDef *i2c_handle, uint8_t reg_addr, uint8_t *data)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	460b      	mov	r3, r1
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(i2c_handle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000dee:	7afb      	ldrb	r3, [r7, #11]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	2190      	movs	r1, #144	@ 0x90
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f002 fca7 	bl	8003758 <HAL_I2C_Mem_Read>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <codec_write_register>:


HAL_StatusTypeDef codec_write_register(I2C_HandleTypeDef *i2c_handle, uint8_t reg_addr, uint8_t data)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
 8000e20:	4613      	mov	r3, r2
 8000e22:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write(i2c_handle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	1cbb      	adds	r3, r7, #2
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2301      	movs	r3, #1
 8000e38:	2190      	movs	r1, #144	@ 0x90
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f002 fb92 	bl	8003564 <HAL_I2C_Mem_Write>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <codec_configure>:

//suppper scabby. Needs work but too excited to see hardware work to write this properly
void codec_configure(I2C_HandleTypeDef *i2c_handle)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef err;
	uint8_t read_data;

	err = codec_write_register(i2c_handle, CODEC_I2C_POWER_CTRL_ADDR, 0x00);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2102      	movs	r1, #2
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffdc 	bl	8000e14 <codec_write_register>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	if(err != HAL_OK)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <codec_configure+0x20>
	{
		while(1);
 8000e66:	bf00      	nop
 8000e68:	e7fd      	b.n	8000e66 <codec_configure+0x1c>
	//if(codec_write_register(i2c_handle, CODEC_I2C_MODE_CTRL_ADDR, 0x00) != HAL_OK)
	//{
	//	while(1);
	//}

	if(codec_write_register(i2c_handle, CODEC_I2C_ADCDAC_CTRL_ADDR, 0x09) != HAL_OK)
 8000e6a:	2209      	movs	r2, #9
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffd0 	bl	8000e14 <codec_write_register>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <codec_configure+0x34>
	{
		while(1);
 8000e7a:	bf00      	nop
 8000e7c:	e7fd      	b.n	8000e7a <codec_configure+0x30>
	}

	err = codec_read_register(i2c_handle, CODEC_I2C_ADCDAC_CTRL_ADDR, &read_data);
 8000e7e:	f107 030e 	add.w	r3, r7, #14
 8000e82:	461a      	mov	r2, r3
 8000e84:	2104      	movs	r1, #4
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffaa 	bl	8000de0 <codec_read_register>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73fb      	strb	r3, [r7, #15]

	err = codec_write_register(i2c_handle, CODEC_I2C_MUTE_CTRL_ADDR, 0x10);
 8000e90:	2210      	movs	r2, #16
 8000e92:	2106      	movs	r1, #6
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ffbd 	bl	8000e14 <codec_write_register>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	73fb      	strb	r3, [r7, #15]
	if(err != HAL_OK)
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <codec_configure+0x5e>
	{
		while(1);
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <codec_configure+0x5a>
	}

	err = codec_write_register(i2c_handle, CODEC_I2C_DACA_VOL_CTRL_ADDR, 0x00);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2107      	movs	r1, #7
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ffb1 	bl	8000e14 <codec_write_register>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
	if(err != HAL_OK)
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <codec_configure+0x76>
	{
		while(1);
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <codec_configure+0x72>
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <codec_hardware_reset_pin_clear>:
	HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, 0);
}

//puts the codec into a run state via hardware pin (nrst)
void codec_hardware_reset_pin_clear(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed2:	4802      	ldr	r0, [pc, #8]	@ (8000edc <codec_hardware_reset_pin_clear+0x14>)
 8000ed4:	f002 f9ce 	bl	8003274 <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40020400 	.word	0x40020400

08000ee0 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//this function is called every time an ADC conversion is complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);

	//unload the array into our structure for easier handling
	pots.pot1 = adcData[0];
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000eee:	801a      	strh	r2, [r3, #0]
	pots.pot2 = adcData[1];
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ef2:	885a      	ldrh	r2, [r3, #2]
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000ef6:	805a      	strh	r2, [r3, #2]
	pots.pot3 = adcData[4];
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000efa:	891a      	ldrh	r2, [r3, #8]
 8000efc:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000efe:	809a      	strh	r2, [r3, #4]
	pots.pot4 = adcData[5];
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f02:	895a      	ldrh	r2, [r3, #10]
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f06:	80da      	strh	r2, [r3, #6]
	pots.pot5 = adcData[2];
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f0a:	889a      	ldrh	r2, [r3, #4]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f0e:	811a      	strh	r2, [r3, #8]
	pots.pot6 = adcData[3];
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f12:	88da      	ldrh	r2, [r3, #6]
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f16:	815a      	strh	r2, [r3, #10]

	update_filter_settings(50, pots.pot2, &bass_filter, BASS_EQ_FREQ);
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f1a:	885b      	ldrh	r3, [r3, #2]
 8000f1c:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8000f64 <HAL_ADC_ConvCpltCallback+0x84>
 8000f20:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0x88>)
 8000f22:	4619      	mov	r1, r3
 8000f24:	2032      	movs	r0, #50	@ 0x32
 8000f26:	f000 f829 	bl	8000f7c <update_filter_settings>
	update_filter_settings(500, pots.pot4, &mid_filter, MID_EQ_FREQ);
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f2c:	88db      	ldrh	r3, [r3, #6]
 8000f2e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000f6c <HAL_ADC_ConvCpltCallback+0x8c>
 8000f32:	4a0f      	ldr	r2, [pc, #60]	@ (8000f70 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3a:	f000 f81f 	bl	8000f7c <update_filter_settings>
	update_filter_settings(5500, pots.pot6, &high_filter, HIGH_EQ_FREQ);
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f40:	895b      	ldrh	r3, [r3, #10]
 8000f42:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000f74 <HAL_ADC_ConvCpltCallback+0x94>
 8000f46:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <HAL_ADC_ConvCpltCallback+0x98>)
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f241 507c 	movw	r0, #5500	@ 0x157c
 8000f4e:	f000 f815 	bl	8000f7c <update_filter_settings>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200002bc 	.word	0x200002bc
 8000f60:	200003d4 	.word	0x200003d4
 8000f64:	43160000 	.word	0x43160000
 8000f68:	200003e0 	.word	0x200003e0
 8000f6c:	447a0000 	.word	0x447a0000
 8000f70:	20000414 	.word	0x20000414
 8000f74:	45bb8000 	.word	0x45bb8000
 8000f78:	20000448 	.word	0x20000448

08000f7c <update_filter_settings>:

void update_filter_settings(uint16_t q_pot, uint16_t boostCut_pot, IIR_peakingFilter *filt, float centre_freq)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f8a:	81fb      	strh	r3, [r7, #14]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	81bb      	strh	r3, [r7, #12]
	//max ADC = 4096
	//205 (approx) for a 20 bit scaling
	float Q, boostCut;

	//Q = q_pot / 205;
	boostCut = (float)boostCut_pot / 2048.0;
 8000f90:	89bb      	ldrh	r3, [r7, #12]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000fd4 <update_filter_settings+0x58>
 8000f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa2:	edc7 7a05 	vstr	s15, [r7, #20]

	if(!audio_update_lockout_flag)
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <update_filter_settings+0x5c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10d      	bne.n	8000fcc <update_filter_settings+0x50>
	{
		IIR_peakingFilter_setParams(filt, centre_freq, (float)q_pot, boostCut);
 8000fb0:	89fb      	ldrh	r3, [r7, #14]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fba:	ed97 1a05 	vldr	s2, [r7, #20]
 8000fbe:	eef0 0a67 	vmov.f32	s1, s15
 8000fc2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fc6:	68b8      	ldr	r0, [r7, #8]
 8000fc8:	f7ff fde6 	bl	8000b98 <IIR_peakingFilter_setParams>
	}

}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	45000000 	.word	0x45000000
 8000fd8:	200003c9 	.word	0x200003c9

08000fdc <HAL_I2SEx_TxRxHalfCpltCallback>:

//function is called when I2S data is half complete, so align the pointers to the first half of the buffers
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	codecInBuff_p = &codecInData[0];
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8000fe6:	4a08      	ldr	r2, [pc, #32]	@ (8001008 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000fe8:	601a      	str	r2, [r3, #0]
	codecOutBuff_p = &codecOutData[0];
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000fee:	601a      	str	r2, [r3, #0]

	audioDataReadyFlag = 1;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200003cc 	.word	0x200003cc
 8001008:	200002c8 	.word	0x200002c8
 800100c:	200003d0 	.word	0x200003d0
 8001010:	20000348 	.word	0x20000348
 8001014:	200003c8 	.word	0x200003c8

08001018 <HAL_I2SEx_TxRxCpltCallback>:

//function is called when I2S data is complete, so align the pointers to the second half of the buffers
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	codecInBuff_p = &codecInData[AUDIO_BUFFER_SIZE/2];
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 8001022:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8001024:	601a      	str	r2, [r3, #0]
	codecOutBuff_p = &codecOutData[AUDIO_BUFFER_SIZE/2];
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8001028:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_I2SEx_TxRxCpltCallback+0x34>)
 800102a:	601a      	str	r2, [r3, #0]

	audioDataReadyFlag = 1;
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200003cc 	.word	0x200003cc
 8001044:	20000308 	.word	0x20000308
 8001048:	200003d0 	.word	0x200003d0
 800104c:	20000388 	.word	0x20000388
 8001050:	200003c8 	.word	0x200003c8

08001054 <processData>:

void processData(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	static float leftIn, leftOut; //, rightIn, rightOut;

	audio_update_lockout_flag = 1;
 800105a:	4b3a      	ldr	r3, [pc, #232]	@ (8001144 <processData+0xf0>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]

	for(uint8_t n = 0; n < (AUDIO_BUFFER_SIZE/2) - 1; n += 2)
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	e061      	b.n	800112a <processData+0xd6>
	{

	//	codecOutBuff_p[n] = codecInBuff_p[n];	//debug
		//left channel data
		leftIn = INT16_TO_FLOAT * ((float) codecInBuff_p[n]);
 8001066:	4b38      	ldr	r3, [pc, #224]	@ (8001148 <processData+0xf4>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	b21b      	sxth	r3, r3
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800114c <processData+0xf8>
 8001080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001084:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <processData+0xfc>)
 8001086:	edc3 7a00 	vstr	s15, [r3]

		if(leftIn > 1.0f)
 800108a:	4b31      	ldr	r3, [pc, #196]	@ (8001150 <processData+0xfc>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	dd09      	ble.n	80010b2 <processData+0x5e>
		{
			leftIn -= 2.0f;	//make sure data is within 1/-1
 800109e:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <processData+0xfc>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80010a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010ac:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <processData+0xfc>)
 80010ae:	edc3 7a00 	vstr	s15, [r3]
		}

		//modify the data here
		leftOut = IIR_peakingFilter_update(&bass_filter, leftIn);
 80010b2:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <processData+0xfc>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	4825      	ldr	r0, [pc, #148]	@ (8001154 <processData+0x100>)
 80010be:	f7ff fe33 	bl	8000d28 <IIR_peakingFilter_update>
 80010c2:	eef0 7a40 	vmov.f32	s15, s0
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <processData+0x104>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
		leftOut = IIR_peakingFilter_update(&mid_filter, leftOut);
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <processData+0x104>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	4821      	ldr	r0, [pc, #132]	@ (800115c <processData+0x108>)
 80010d8:	f7ff fe26 	bl	8000d28 <IIR_peakingFilter_update>
 80010dc:	eef0 7a40 	vmov.f32	s15, s0
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <processData+0x104>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]
		leftOut = IIR_peakingFilter_update(&high_filter, leftOut);
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <processData+0x104>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	481b      	ldr	r0, [pc, #108]	@ (8001160 <processData+0x10c>)
 80010f2:	f7ff fe19 	bl	8000d28 <IIR_peakingFilter_update>
 80010f6:	eef0 7a40 	vmov.f32	s15, s0
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <processData+0x104>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]
		//leftOut = leftIn; //debug

		//convert back to signed int and transfer to DAC (via pointer)
		codecOutBuff_p[n] =  (int16_t) (FLOAT_TO_INT16 * leftOut);
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <processData+0x104>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001164 <processData+0x110>
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <processData+0x114>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111c:	ee17 2a90 	vmov	r2, s15
 8001120:	b212      	sxth	r2, r2
 8001122:	801a      	strh	r2, [r3, #0]
	for(uint8_t n = 0; n < (AUDIO_BUFFER_SIZE/2) - 1; n += 2)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3302      	adds	r3, #2
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b1e      	cmp	r3, #30
 800112e:	d99a      	bls.n	8001066 <processData+0x12>
		//convert back to signed int and transfer to DAC (via pointer)
		codecOutBuff_p[n] = (int16_t) rightOut;
*/
	}

	audio_update_lockout_flag = 0;
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <processData+0xf0>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	audioDataReadyFlag = 0;
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <processData+0x118>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200003c9 	.word	0x200003c9
 8001148:	200003cc 	.word	0x200003cc
 800114c:	37fffffc 	.word	0x37fffffc
 8001150:	2000047c 	.word	0x2000047c
 8001154:	200003e0 	.word	0x200003e0
 8001158:	20000480 	.word	0x20000480
 800115c:	20000414 	.word	0x20000414
 8001160:	20000448 	.word	0x20000448
 8001164:	47000000 	.word	0x47000000
 8001168:	200003d0 	.word	0x200003d0
 800116c:	200003c8 	.word	0x200003c8

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001174:	f000 fdc2 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f854 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f000 fa88 	bl	8001690 <MX_GPIO_Init>
  MX_DMA_Init();
 8001180:	f000 fa48 	bl	8001614 <MX_DMA_Init>
  MX_ADC1_Init();
 8001184:	f000 f8b8 	bl	80012f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001188:	f000 f94e 	bl	8001428 <MX_I2C1_Init>
  MX_I2S2_Init();
 800118c:	f000 f97a 	bl	8001484 <MX_I2S2_Init>
  MX_TIM2_Init();
 8001190:	f000 f9a6 	bl	80014e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001194:	f000 f9f0 	bl	8001578 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, NUM_ADC_CHANNELS); 	//start the ADC and link it with the DMA
 8001198:	2206      	movs	r2, #6
 800119a:	4916      	ldr	r1, [pc, #88]	@ (80011f4 <main+0x84>)
 800119c:	4816      	ldr	r0, [pc, #88]	@ (80011f8 <main+0x88>)
 800119e:	f000 fe87 	bl	8001eb0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2); 											//start timer 2 which triggers the ADC
 80011a2:	4816      	ldr	r0, [pc, #88]	@ (80011fc <main+0x8c>)
 80011a4:	f004 fd42 	bl	8005c2c <HAL_TIM_Base_Start>
  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *) codecOutData, (uint16_t *) codecInData, AUDIO_BUFFER_SIZE);
 80011a8:	2340      	movs	r3, #64	@ 0x40
 80011aa:	4a15      	ldr	r2, [pc, #84]	@ (8001200 <main+0x90>)
 80011ac:	4915      	ldr	r1, [pc, #84]	@ (8001204 <main+0x94>)
 80011ae:	4816      	ldr	r0, [pc, #88]	@ (8001208 <main+0x98>)
 80011b0:	f003 fafe 	bl	80047b0 <HAL_I2SEx_TransmitReceive_DMA>
  codec_hardware_reset_pin_clear();
 80011b4:	f7ff fe88 	bl	8000ec8 <codec_hardware_reset_pin_clear>
  HAL_Delay(50);
 80011b8:	2032      	movs	r0, #50	@ 0x32
 80011ba:	f000 fe11 	bl	8001de0 <HAL_Delay>
  codec_configure(&hi2c1);
 80011be:	4813      	ldr	r0, [pc, #76]	@ (800120c <main+0x9c>)
 80011c0:	f7ff fe43 	bl	8000e4a <codec_configure>
  IIR_peakingFilter_init(&bass_filter, SAMPLE_RATE_HZ);		//initialise bass frequency peaking filter
 80011c4:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001210 <main+0xa0>
 80011c8:	4812      	ldr	r0, [pc, #72]	@ (8001214 <main+0xa4>)
 80011ca:	f7ff fcab 	bl	8000b24 <IIR_peakingFilter_init>
  IIR_peakingFilter_init(&mid_filter, SAMPLE_RATE_HZ);
 80011ce:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001210 <main+0xa0>
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <main+0xa8>)
 80011d4:	f7ff fca6 	bl	8000b24 <IIR_peakingFilter_init>
  IIR_peakingFilter_init(&high_filter, SAMPLE_RATE_HZ);
 80011d8:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001210 <main+0xa0>
 80011dc:	480f      	ldr	r0, [pc, #60]	@ (800121c <main+0xac>)
 80011de:	f7ff fca1 	bl	8000b24 <IIR_peakingFilter_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(audioDataReadyFlag)
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <main+0xb0>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0fa      	beq.n	80011e2 <main+0x72>
	  {
		  processData();
 80011ec:	f7ff ff32 	bl	8001054 <processData>
	  if(audioDataReadyFlag)
 80011f0:	e7f7      	b.n	80011e2 <main+0x72>
 80011f2:	bf00      	nop
 80011f4:	200002bc 	.word	0x200002bc
 80011f8:	20000028 	.word	0x20000028
 80011fc:	2000022c 	.word	0x2000022c
 8001200:	200002c8 	.word	0x200002c8
 8001204:	20000348 	.word	0x20000348
 8001208:	20000124 	.word	0x20000124
 800120c:	200000d0 	.word	0x200000d0
 8001210:	47371b00 	.word	0x47371b00
 8001214:	200003e0 	.word	0x200003e0
 8001218:	20000414 	.word	0x20000414
 800121c:	20000448 	.word	0x20000448
 8001220:	200003c8 	.word	0x200003c8

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f005 f922 	bl	800647c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <SystemClock_Config+0xcc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <SystemClock_Config+0xcc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a21      	ldr	r2, [pc, #132]	@ (80012f4 <SystemClock_Config+0xd0>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <SystemClock_Config+0xd0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2302      	movs	r3, #2
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001290:	2300      	movs	r3, #0
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001294:	2310      	movs	r3, #16
 8001296:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001298:	23c0      	movs	r3, #192	@ 0xc0
 800129a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fee9 	bl	8005080 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b4:	f000 fa62 	bl	800177c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80012ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2103      	movs	r1, #3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 f94a 	bl	8005570 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012e2:	f000 fa4b 	bl	800177c <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	@ 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800130a:	4b45      	ldr	r3, [pc, #276]	@ (8001420 <MX_ADC1_Init+0x128>)
 800130c:	4a45      	ldr	r2, [pc, #276]	@ (8001424 <MX_ADC1_Init+0x12c>)
 800130e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001310:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <MX_ADC1_Init+0x128>)
 8001312:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001316:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001318:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <MX_ADC1_Init+0x128>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800131e:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <MX_ADC1_Init+0x128>)
 8001320:	2201      	movs	r2, #1
 8001322:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001324:	4b3e      	ldr	r3, [pc, #248]	@ (8001420 <MX_ADC1_Init+0x128>)
 8001326:	2200      	movs	r2, #0
 8001328:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132a:	4b3d      	ldr	r3, [pc, #244]	@ (8001420 <MX_ADC1_Init+0x128>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <MX_ADC1_Init+0x128>)
 8001334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001338:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800133a:	4b39      	ldr	r3, [pc, #228]	@ (8001420 <MX_ADC1_Init+0x128>)
 800133c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <MX_ADC1_Init+0x128>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001348:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <MX_ADC1_Init+0x128>)
 800134a:	2206      	movs	r2, #6
 800134c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800134e:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <MX_ADC1_Init+0x128>)
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001356:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <MX_ADC1_Init+0x128>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	4830      	ldr	r0, [pc, #192]	@ (8001420 <MX_ADC1_Init+0x128>)
 800135e:	f000 fd63 	bl	8001e28 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001368:	f000 fa08 	bl	800177c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001374:	2304      	movs	r3, #4
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4828      	ldr	r0, [pc, #160]	@ (8001420 <MX_ADC1_Init+0x128>)
 800137e:	f000 febb 	bl	80020f8 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001388:	f000 f9f8 	bl	800177c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800138c:	2301      	movs	r3, #1
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4821      	ldr	r0, [pc, #132]	@ (8001420 <MX_ADC1_Init+0x128>)
 800139a:	f000 fead 	bl	80020f8 <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80013a4:	f000 f9ea 	bl	800177c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013ac:	2303      	movs	r3, #3
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	481a      	ldr	r0, [pc, #104]	@ (8001420 <MX_ADC1_Init+0x128>)
 80013b6:	f000 fe9f 	bl	80020f8 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80013c0:	f000 f9dc 	bl	800177c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013c4:	2303      	movs	r3, #3
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4813      	ldr	r0, [pc, #76]	@ (8001420 <MX_ADC1_Init+0x128>)
 80013d2:	f000 fe91 	bl	80020f8 <HAL_ADC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80013dc:	f000 f9ce 	bl	800177c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013e4:	2305      	movs	r3, #5
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_ADC1_Init+0x128>)
 80013ee:	f000 fe83 	bl	80020f8 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80013f8:	f000 f9c0 	bl	800177c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013fc:	2305      	movs	r3, #5
 80013fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001400:	2306      	movs	r3, #6
 8001402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_ADC1_Init+0x128>)
 800140a:	f000 fe75 	bl	80020f8 <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001414:	f000 f9b2 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000028 	.word	0x20000028
 8001424:	40012000 	.word	0x40012000

08001428 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_I2C1_Init+0x54>)
 800142e:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <MX_I2C1_Init+0x58>)
 8001430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_I2C1_Init+0x54>)
 8001434:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001438:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <MX_I2C1_Init+0x54>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001440:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_I2C1_Init+0x54>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <MX_I2C1_Init+0x54>)
 8001448:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_I2C1_Init+0x54>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_I2C1_Init+0x54>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <MX_I2C1_Init+0x54>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_I2C1_Init+0x54>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_I2C1_Init+0x54>)
 8001468:	f001 ff38 	bl	80032dc <HAL_I2C_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001472:	f000 f983 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000d0 	.word	0x200000d0
 8001480:	40005400 	.word	0x40005400

08001484 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <MX_I2S2_Init+0x54>)
 800148a:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <MX_I2S2_Init+0x58>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_I2S2_Init+0x54>)
 8001490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001494:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_I2S2_Init+0x54>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_I2S2_Init+0x54>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <MX_I2S2_Init+0x54>)
 80014a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <MX_I2S2_Init+0x54>)
 80014ac:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014b0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_I2S2_Init+0x54>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <MX_I2S2_Init+0x54>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_I2S2_Init+0x54>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_I2S2_Init+0x54>)
 80014c6:	f002 ff2d 	bl	8004324 <HAL_I2S_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80014d0:	f000 f954 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000124 	.word	0x20000124
 80014dc:	40003800 	.word	0x40003800

080014e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_TIM2_Init+0x94>)
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_TIM2_Init+0x94>)
 8001506:	221f      	movs	r2, #31
 8001508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_TIM2_Init+0x94>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_TIM2_Init+0x94>)
 8001512:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_TIM2_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_TIM2_Init+0x94>)
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001524:	4813      	ldr	r0, [pc, #76]	@ (8001574 <MX_TIM2_Init+0x94>)
 8001526:	f004 fb31 	bl	8005b8c <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001530:	f000 f924 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_TIM2_Init+0x94>)
 8001542:	f004 fccb 	bl	8005edc <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800154c:	f000 f916 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001550:	2320      	movs	r3, #32
 8001552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_TIM2_Init+0x94>)
 800155e:	f004 fefd 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 f908 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000022c 	.word	0x2000022c

08001578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <MX_TIM3_Init+0x94>)
 8001596:	4a1e      	ldr	r2, [pc, #120]	@ (8001610 <MX_TIM3_Init+0x98>)
 8001598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <MX_TIM3_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_TIM3_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <MX_TIM3_Init+0x94>)
 80015a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <MX_TIM3_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_TIM3_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ba:	4814      	ldr	r0, [pc, #80]	@ (800160c <MX_TIM3_Init+0x94>)
 80015bc:	f004 fae6 	bl	8005b8c <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 f8d9 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	@ (800160c <MX_TIM3_Init+0x94>)
 80015d8:	f004 fc80 	bl	8005edc <HAL_TIM_ConfigClockSource>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f000 f8cb 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015e6:	2320      	movs	r3, #32
 80015e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <MX_TIM3_Init+0x94>)
 80015f4:	f004 feb2 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015fe:	f000 f8bd 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000274 	.word	0x20000274
 8001610:	40000400 	.word	0x40000400

08001614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <MX_DMA_Init+0x78>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <MX_DMA_Init+0x78>)
 8001624:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <MX_DMA_Init+0x78>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_DMA_Init+0x78>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a13      	ldr	r2, [pc, #76]	@ (800168c <MX_DMA_Init+0x78>)
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_DMA_Init+0x78>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	200e      	movs	r0, #14
 8001658:	f001 f8c9 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800165c:	200e      	movs	r0, #14
 800165e:	f001 f8e2 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	200f      	movs	r0, #15
 8001668:	f001 f8c1 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800166c:	200f      	movs	r0, #15
 800166e:	f001 f8da 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2038      	movs	r0, #56	@ 0x38
 8001678:	f001 f8b9 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800167c:	2038      	movs	r0, #56	@ 0x38
 800167e:	f001 f8d2 	bl	8002826 <HAL_NVIC_EnableIRQ>

}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a30      	ldr	r2, [pc, #192]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a29      	ldr	r2, [pc, #164]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <MX_GPIO_Init+0xe0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001700:	481c      	ldr	r0, [pc, #112]	@ (8001774 <MX_GPIO_Init+0xe4>)
 8001702:	f001 fdb7 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800170c:	481a      	ldr	r0, [pc, #104]	@ (8001778 <MX_GPIO_Init+0xe8>)
 800170e:	f001 fdb1 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SWITCH_0_Pin SWITCH_1_Pin */
  GPIO_InitStruct.Pin = SWITCH_0_Pin|SWITCH_1_Pin;
 8001712:	2330      	movs	r3, #48	@ 0x30
 8001714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	4619      	mov	r1, r3
 8001724:	4814      	ldr	r0, [pc, #80]	@ (8001778 <MX_GPIO_Init+0xe8>)
 8001726:	f001 fc09 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_RST_Pin */
  GPIO_InitStruct.Pin = CODEC_RST_Pin;
 800172a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CODEC_RST_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4619      	mov	r1, r3
 8001742:	480c      	ldr	r0, [pc, #48]	@ (8001774 <MX_GPIO_Init+0xe4>)
 8001744:	f001 fbfa 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 8001748:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800174c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_GPIO_Init+0xe8>)
 8001762:	f001 fbeb 	bl	8002f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001766:	bf00      	nop
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40020400 	.word	0x40020400
 8001778:	40020800 	.word	0x40020800

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <Error_Handler+0x8>

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a0f      	ldr	r2, [pc, #60]	@ (80017d4 <HAL_MspInit+0x4c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2f      	ldr	r2, [pc, #188]	@ (80018b4 <HAL_ADC_MspInit+0xdc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d158      	bne.n	80018ac <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a2d      	ldr	r2, [pc, #180]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b2b      	ldr	r3, [pc, #172]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_ADC_MspInit+0xe0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001832:	233f      	movs	r3, #63	@ 0x3f
 8001834:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001836:	2303      	movs	r3, #3
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	481d      	ldr	r0, [pc, #116]	@ (80018bc <HAL_ADC_MspInit+0xe4>)
 8001846:	f001 fb79 	bl	8002f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800184c:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <HAL_ADC_MspInit+0xec>)
 800184e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001850:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001852:	2200      	movs	r2, #0
 8001854:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001856:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800185c:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001868:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800186c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001870:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800187c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001880:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001882:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001884:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001888:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001890:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 8001892:	f000 ffe3 	bl	800285c <HAL_DMA_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800189c:	f7ff ff6e 	bl	800177c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 80018a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80018a6:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_ADC_MspInit+0xe8>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40012000 	.word	0x40012000
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	20000070 	.word	0x20000070
 80018c4:	40026410 	.word	0x40026410

080018c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	@ (800194c <HAL_I2C_MspInit+0x84>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12b      	bne.n	8001942 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001906:	23c0      	movs	r3, #192	@ 0xc0
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190a:	2312      	movs	r3, #18
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001916:	2304      	movs	r3, #4
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <HAL_I2C_MspInit+0x8c>)
 8001922:	f001 fb0b 	bl	8002f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 8001930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40005400 	.word	0x40005400
 8001950:	40023800 	.word	0x40023800
 8001954:	40020400 	.word	0x40020400

08001958 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	@ 0x38
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6b      	ldr	r2, [pc, #428]	@ (8001b30 <HAL_I2S_MspInit+0x1d8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	f040 80ce 	bne.w	8001b26 <HAL_I2S_MspInit+0x1ce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800198a:	2301      	movs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800198e:	23c0      	movs	r3, #192	@ 0xc0
 8001990:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8001992:	2304      	movs	r3, #4
 8001994:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4618      	mov	r0, r3
 800199c:	f003 ffb4 	bl	8005908 <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80019a6:	f7ff fee9 	bl	800177c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b61      	ldr	r3, [pc, #388]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	4a60      	ldr	r2, [pc, #384]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a59      	ldr	r2, [pc, #356]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b57      	ldr	r3, [pc, #348]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b53      	ldr	r3, [pc, #332]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a52      	ldr	r2, [pc, #328]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b50      	ldr	r3, [pc, #320]	@ (8001b34 <HAL_I2S_MspInit+0x1dc>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fe:	2304      	movs	r3, #4
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	4847      	ldr	r0, [pc, #284]	@ (8001b38 <HAL_I2S_MspInit+0x1e0>)
 8001a1a:	f001 fa8f 	bl	8002f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001a1e:	2348      	movs	r3, #72	@ 0x48
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	483f      	ldr	r0, [pc, #252]	@ (8001b38 <HAL_I2S_MspInit+0x1e0>)
 8001a3a:	f001 fa7f 	bl	8002f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001a3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a50:	2305      	movs	r3, #5
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4838      	ldr	r0, [pc, #224]	@ (8001b3c <HAL_I2S_MspInit+0x1e4>)
 8001a5c:	f001 fa6e 	bl	8002f3c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001a60:	4b37      	ldr	r3, [pc, #220]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a62:	4a38      	ldr	r2, [pc, #224]	@ (8001b44 <HAL_I2S_MspInit+0x1ec>)
 8001a64:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6c:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a6e:	2240      	movs	r2, #64	@ 0x40
 8001a70:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a72:	4b33      	ldr	r3, [pc, #204]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a7e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a80:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a86:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a96:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a98:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001a9a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a9e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001aa6:	4826      	ldr	r0, [pc, #152]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001aa8:	f000 fed8 	bl	800285c <HAL_DMA_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2S_MspInit+0x15e>
    {
      Error_Handler();
 8001ab2:	f7ff fe63 	bl	800177c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a21      	ldr	r2, [pc, #132]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8001abc:	4a20      	ldr	r2, [pc, #128]	@ (8001b40 <HAL_I2S_MspInit+0x1e8>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001ac4:	4a21      	ldr	r2, [pc, #132]	@ (8001b4c <HAL_I2S_MspInit+0x1f4>)
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001aca:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001ace:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ae2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aea:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af2:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001afa:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001afe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001b0a:	480f      	ldr	r0, [pc, #60]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001b0c:	f000 fea6 	bl	800285c <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2S_MspInit+0x1c2>
    {
      Error_Handler();
 8001b16:	f7ff fe31 	bl	800177c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b20:	4a09      	ldr	r2, [pc, #36]	@ (8001b48 <HAL_I2S_MspInit+0x1f0>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3738      	adds	r7, #56	@ 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40003800 	.word	0x40003800
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	2000016c 	.word	0x2000016c
 8001b44:	40026070 	.word	0x40026070
 8001b48:	200001cc 	.word	0x200001cc
 8001b4c:	40026058 	.word	0x40026058

08001b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d10e      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x70>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	4a15      	ldr	r2, [pc, #84]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x70>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x70>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b7e:	e01a      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x74>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d115      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x70>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x70>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x70>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	201d      	movs	r0, #29
 8001bac:	f000 fe1f 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bb0:	201d      	movs	r0, #29
 8001bb2:	f000 fe38 	bl	8002826 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40000400 	.word	0x40000400

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <NMI_Handler+0x4>

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <MemManage_Handler+0x4>

08001be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <UsageFault_Handler+0x4>

08001bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1e:	f000 f8bf 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <DMA1_Stream3_IRQHandler+0x10>)
 8001c2e:	f000 ff1b 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200001cc 	.word	0x200001cc

08001c3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <DMA1_Stream4_IRQHandler+0x10>)
 8001c42:	f000 ff11 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000016c 	.word	0x2000016c

08001c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c54:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <TIM3_IRQHandler+0x18>)
 8001c56:	f004 f851 	bl	8005cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001c5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c5e:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <TIM3_IRQHandler+0x1c>)
 8001c60:	f001 fb21 	bl	80032a6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000274 	.word	0x20000274
 8001c6c:	40020800 	.word	0x40020800

08001c70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <DMA2_Stream0_IRQHandler+0x10>)
 8001c76:	f000 fef7 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000070 	.word	0x20000070

08001c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <SystemInit+0x20>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <SystemInit+0x20>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cac:	f7ff ffea 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	@ (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f004 fbd9 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7ff fa49 	bl	8001170 <main>
  bx  lr    
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001cec:	080073ac 	.word	0x080073ac
  ldr r2, =_sbss
 8001cf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cf4:	20000488 	.word	0x20000488

08001cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <HAL_Init+0x40>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <HAL_Init+0x40>)
 8001d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <HAL_Init+0x40>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f000 fd57 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2a:	200f      	movs	r0, #15
 8001d2c:	f000 f808 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d30:	f7ff fd2a 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_InitTick+0x54>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_InitTick+0x58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fd6f 	bl	8002842 <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00e      	b.n	8001d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d80a      	bhi.n	8001d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 fd37 	bl	80027ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4a06      	ldr	r2, [pc, #24]	@ (8001d9c <HAL_InitTick+0x5c>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000484 	.word	0x20000484

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000484 	.word	0x20000484

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e033      	b.n	8001ea6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fcc6 	bl	80017d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e6e:	f023 0302 	bic.w	r3, r3, #2
 8001e72:	f043 0202 	orr.w	r2, r3, #2
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa5e 	bl	800233c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e96:	e001      	b.n	8001e9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Start_DMA+0x1e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e0e9      	b.n	80020a2 <HAL_ADC_Start_DMA+0x1f2>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d018      	beq.n	8001f16 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef4:	4b6d      	ldr	r3, [pc, #436]	@ (80020ac <HAL_ADC_Start_DMA+0x1fc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6d      	ldr	r2, [pc, #436]	@ (80020b0 <HAL_ADC_Start_DMA+0x200>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0c9a      	lsrs	r2, r3, #18
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f9      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f24:	d107      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f34:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 80a1 	bne.w	8002088 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f84:	d106      	bne.n	8001f94 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f023 0206 	bic.w	r2, r3, #6
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f92:	e002      	b.n	8001f9a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa2:	4b44      	ldr	r3, [pc, #272]	@ (80020b4 <HAL_ADC_Start_DMA+0x204>)
 8001fa4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001faa:	4a43      	ldr	r2, [pc, #268]	@ (80020b8 <HAL_ADC_Start_DMA+0x208>)
 8001fac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb2:	4a42      	ldr	r2, [pc, #264]	@ (80020bc <HAL_ADC_Start_DMA+0x20c>)
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fba:	4a41      	ldr	r2, [pc, #260]	@ (80020c0 <HAL_ADC_Start_DMA+0x210>)
 8001fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001fd6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	334c      	adds	r3, #76	@ 0x4c
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f000 fcde 	bl	80029b8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2b00      	cmp	r3, #0
 8002006:	d12a      	bne.n	800205e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2d      	ldr	r2, [pc, #180]	@ (80020c4 <HAL_ADC_Start_DMA+0x214>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d015      	beq.n	800203e <HAL_ADC_Start_DMA+0x18e>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2c      	ldr	r2, [pc, #176]	@ (80020c8 <HAL_ADC_Start_DMA+0x218>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d105      	bne.n	8002028 <HAL_ADC_Start_DMA+0x178>
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_ADC_Start_DMA+0x204>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a27      	ldr	r2, [pc, #156]	@ (80020cc <HAL_ADC_Start_DMA+0x21c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d136      	bne.n	80020a0 <HAL_ADC_Start_DMA+0x1f0>
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_ADC_Start_DMA+0x204>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d130      	bne.n	80020a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d129      	bne.n	80020a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	e020      	b.n	80020a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <HAL_ADC_Start_DMA+0x214>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d11b      	bne.n	80020a0 <HAL_ADC_Start_DMA+0x1f0>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d114      	bne.n	80020a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	e00b      	b.n	80020a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000
 80020b0:	431bde83 	.word	0x431bde83
 80020b4:	40012300 	.word	0x40012300
 80020b8:	08002535 	.word	0x08002535
 80020bc:	080025ef 	.word	0x080025ef
 80020c0:	0800260b 	.word	0x0800260b
 80020c4:	40012000 	.word	0x40012000
 80020c8:	40012100 	.word	0x40012100
 80020cc:	40012200 	.word	0x40012200

080020d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1c>
 8002110:	2302      	movs	r3, #2
 8002112:	e105      	b.n	8002320 <HAL_ADC_ConfigChannel+0x228>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b09      	cmp	r3, #9
 8002122:	d925      	bls.n	8002170 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68d9      	ldr	r1, [r3, #12]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	3b1e      	subs	r3, #30
 800213a:	2207      	movs	r2, #7
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43da      	mvns	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	400a      	ands	r2, r1
 8002148:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68d9      	ldr	r1, [r3, #12]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	4603      	mov	r3, r0
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4403      	add	r3, r0
 8002162:	3b1e      	subs	r3, #30
 8002164:	409a      	lsls	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	e022      	b.n	80021b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	2207      	movs	r2, #7
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	400a      	ands	r2, r1
 8002192:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6919      	ldr	r1, [r3, #16]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4403      	add	r3, r0
 80021ac:	409a      	lsls	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d824      	bhi.n	8002208 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b05      	subs	r3, #5
 80021d0:	221f      	movs	r2, #31
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b05      	subs	r3, #5
 80021fa:	fa00 f203 	lsl.w	r2, r0, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34
 8002206:	e04c      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d824      	bhi.n	800225a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b23      	subs	r3, #35	@ 0x23
 8002222:	221f      	movs	r2, #31
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43da      	mvns	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	400a      	ands	r2, r1
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b23      	subs	r3, #35	@ 0x23
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
 8002258:	e023      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b41      	subs	r3, #65	@ 0x41
 800226c:	221f      	movs	r2, #31
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	400a      	ands	r2, r1
 800227a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b41      	subs	r3, #65	@ 0x41
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_ADC_ConfigChannel+0x234>)
 80022a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a21      	ldr	r2, [pc, #132]	@ (8002330 <HAL_ADC_ConfigChannel+0x238>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1cc>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a19      	ldr	r2, [pc, #100]	@ (8002330 <HAL_ADC_ConfigChannel+0x238>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d123      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d003      	beq.n	80022de <HAL_ADC_ConfigChannel+0x1e6>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b11      	cmp	r3, #17
 80022dc:	d11b      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d111      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HAL_ADC_ConfigChannel+0x23c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <HAL_ADC_ConfigChannel+0x240>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	0c9a      	lsrs	r2, r3, #18
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002308:	e002      	b.n	8002310 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3b01      	subs	r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40012300 	.word	0x40012300
 8002330:	40012000 	.word	0x40012000
 8002334:	20000000 	.word	0x20000000
 8002338:	431bde83 	.word	0x431bde83

0800233c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002344:	4b79      	ldr	r3, [pc, #484]	@ (800252c <ADC_Init+0x1f0>)
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	021a      	lsls	r2, r3, #8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	4a58      	ldr	r2, [pc, #352]	@ (8002530 <ADC_Init+0x1f4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d022      	beq.n	800241a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6899      	ldr	r1, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e00f      	b.n	800243a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002438:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0202 	bic.w	r2, r2, #2
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
 8002454:	005a      	lsls	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01b      	beq.n	80024a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002476:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	3b01      	subs	r3, #1
 8002494:	035a      	lsls	r2, r3, #13
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	e007      	b.n	80024b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	051a      	lsls	r2, r3, #20
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024f2:	025a      	lsls	r2, r3, #9
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800250a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6899      	ldr	r1, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	029a      	lsls	r2, r3, #10
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40012300 	.word	0x40012300
 8002530:	0f000001 	.word	0x0f000001

08002534 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d13c      	bne.n	80025c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d12b      	bne.n	80025c0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800256c:	2b00      	cmp	r3, #0
 800256e:	d127      	bne.n	80025c0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002588:	2b00      	cmp	r3, #0
 800258a:	d119      	bne.n	80025c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0220 	bic.w	r2, r2, #32
 800259a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7fe fc8d 	bl	8000ee0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025c6:	e00e      	b.n	80025e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff fd85 	bl	80020e4 <HAL_ADC_ErrorCallback>
}
 80025da:	e004      	b.n	80025e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fd67 	bl	80020d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002616:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2240      	movs	r2, #64	@ 0x40
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f043 0204 	orr.w	r2, r3, #4
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fd5a 	bl	80020e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	@ (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	@ (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	@ (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	@ (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	@ 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	@ 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a4:	d301      	bcc.n	80027aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <SysTick_Config+0x40>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b2:	210f      	movs	r1, #15
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f7ff ff8e 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <SysTick_Config+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <SysTick_Config+0x40>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff29 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff3e 	bl	8002680 <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff8e 	bl	800272c <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5d 	bl	80026d8 <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff31 	bl	800269c <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa2 	bl	8002794 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff faae 	bl	8001dc8 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e099      	b.n	80029ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002898:	e00f      	b.n	80028ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289a:	f7ff fa95 	bl	8001dc8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d908      	bls.n	80028ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2203      	movs	r2, #3
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e078      	b.n	80029ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e8      	bne.n	800289a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <HAL_DMA_Init+0x158>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	2b04      	cmp	r3, #4
 8002912:	d107      	bne.n	8002924 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	4313      	orrs	r3, r2
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f023 0307 	bic.w	r3, r3, #7
 800293a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	2b04      	cmp	r3, #4
 800294c:	d117      	bne.n	800297e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fa6f 	bl	8002e44 <DMA_CheckFifoParam>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2240      	movs	r2, #64	@ 0x40
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800297a:	2301      	movs	r3, #1
 800297c:	e016      	b.n	80029ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa26 	bl	8002dd8 <DMA_CalcBaseAndBitshift>
 800298c:	4603      	mov	r3, r0
 800298e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	223f      	movs	r2, #63	@ 0x3f
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	f010803f 	.word	0xf010803f

080029b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_DMA_Start_IT+0x26>
 80029da:	2302      	movs	r3, #2
 80029dc:	e040      	b.n	8002a60 <HAL_DMA_Start_IT+0xa8>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d12f      	bne.n	8002a52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f9b8 	bl	8002d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	223f      	movs	r2, #63	@ 0x3f
 8002a12:	409a      	lsls	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0216 	orr.w	r2, r2, #22
 8002a26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0208 	orr.w	r2, r2, #8
 8002a3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e005      	b.n	8002a5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a74:	4b8e      	ldr	r3, [pc, #568]	@ (8002cb0 <HAL_DMA_IRQHandler+0x248>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a8e      	ldr	r2, [pc, #568]	@ (8002cb4 <HAL_DMA_IRQHandler+0x24c>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	2208      	movs	r2, #8
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01a      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad8:	2201      	movs	r2, #1
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	2201      	movs	r2, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	2204      	movs	r2, #4
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	2210      	movs	r2, #16
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d043      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03c      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2210      	movs	r2, #16
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d018      	beq.n	8002baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d024      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
 8002b96:	e01f      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e016      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0208 	bic.w	r2, r2, #8
 8002bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	2220      	movs	r2, #32
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 808f 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8087 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	2220      	movs	r2, #32
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d136      	bne.n	8002c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0216 	bic.w	r2, r2, #22
 8002c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x1da>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0208 	bic.w	r2, r2, #8
 8002c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c56:	223f      	movs	r2, #63	@ 0x3f
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d07e      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
        }
        return;
 8002c7e:	e079      	b.n	8002d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e02c      	b.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e01e      	b.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10f      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0210 	bic.w	r2, r2, #16
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d032      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d022      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2205      	movs	r2, #5
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d307      	bcc.n	8002d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f2      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x2cc>
 8002d4e:	e000      	b.n	8002d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d74:	bf00      	nop
    }
  }
}
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b40      	cmp	r3, #64	@ 0x40
 8002da8:	d108      	bne.n	8002dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dba:	e007      	b.n	8002dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3b10      	subs	r3, #16
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <DMA_CalcBaseAndBitshift+0x64>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002df2:	4a13      	ldr	r2, [pc, #76]	@ (8002e40 <DMA_CalcBaseAndBitshift+0x68>)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d909      	bls.n	8002e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e18:	e007      	b.n	8002e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	aaaaaaab 	.word	0xaaaaaaab
 8002e40:	08006fc4 	.word	0x08006fc4

08002e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11f      	bne.n	8002e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d856      	bhi.n	8002f12 <DMA_CheckFifoParam+0xce>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <DMA_CheckFifoParam+0x28>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e8f 	.word	0x08002e8f
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002f13 	.word	0x08002f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d046      	beq.n	8002f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e043      	b.n	8002f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e96:	d140      	bne.n	8002f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9c:	e03d      	b.n	8002f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea6:	d121      	bne.n	8002eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d837      	bhi.n	8002f1e <DMA_CheckFifoParam+0xda>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <DMA_CheckFifoParam+0x70>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ecb 	.word	0x08002ecb
 8002ebc:	08002ec5 	.word	0x08002ec5
 8002ec0:	08002edd 	.word	0x08002edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e030      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d025      	beq.n	8002f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eda:	e022      	b.n	8002f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eea:	e01c      	b.n	8002f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d903      	bls.n	8002efa <DMA_CheckFifoParam+0xb6>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d003      	beq.n	8002f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ef8:	e018      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      break;
 8002efe:	e015      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e00b      	b.n	8002f2a <DMA_CheckFifoParam+0xe6>
      break;
 8002f12:	bf00      	nop
 8002f14:	e00a      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
 8002f18:	e008      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e006      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e004      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e002      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	@ 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	e16b      	b.n	8003230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	f040 815a 	bne.w	800322a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d005      	beq.n	8002f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d130      	bne.n	8002ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 0201 	and.w	r2, r3, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d017      	beq.n	800302c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d123      	bne.n	8003080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	08da      	lsrs	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3208      	adds	r2, #8
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	220f      	movs	r2, #15
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80b4 	beq.w	800322a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b60      	ldr	r3, [pc, #384]	@ (8003248 <HAL_GPIO_Init+0x30c>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003248 <HAL_GPIO_Init+0x30c>)
 80030cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003248 <HAL_GPIO_Init+0x30c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030de:	4a5b      	ldr	r2, [pc, #364]	@ (800324c <HAL_GPIO_Init+0x310>)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	@ (8003250 <HAL_GPIO_Init+0x314>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <HAL_GPIO_Init+0x226>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a51      	ldr	r2, [pc, #324]	@ (8003254 <HAL_GPIO_Init+0x318>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x222>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a50      	ldr	r2, [pc, #320]	@ (8003258 <HAL_GPIO_Init+0x31c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x21e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4f      	ldr	r2, [pc, #316]	@ (800325c <HAL_GPIO_Init+0x320>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x21a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4e      	ldr	r2, [pc, #312]	@ (8003260 <HAL_GPIO_Init+0x324>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x216>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4d      	ldr	r2, [pc, #308]	@ (8003264 <HAL_GPIO_Init+0x328>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x212>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4c      	ldr	r2, [pc, #304]	@ (8003268 <HAL_GPIO_Init+0x32c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4b      	ldr	r2, [pc, #300]	@ (800326c <HAL_GPIO_Init+0x330>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x20a>
 8003142:	2307      	movs	r3, #7
 8003144:	e00e      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003146:	2308      	movs	r3, #8
 8003148:	e00c      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800314a:	2306      	movs	r3, #6
 800314c:	e00a      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800314e:	2305      	movs	r3, #5
 8003150:	e008      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003152:	2304      	movs	r3, #4
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003156:	2303      	movs	r3, #3
 8003158:	e004      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800315a:	2302      	movs	r3, #2
 800315c:	e002      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003162:	2300      	movs	r3, #0
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f002 0203 	and.w	r2, r2, #3
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003174:	4935      	ldr	r1, [pc, #212]	@ (800324c <HAL_GPIO_Init+0x310>)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003182:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <HAL_GPIO_Init+0x334>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031a6:	4a32      	ldr	r2, [pc, #200]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ac:	4b30      	ldr	r3, [pc, #192]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d0:	4a27      	ldr	r2, [pc, #156]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031d6:	4b26      	ldr	r3, [pc, #152]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_GPIO_Init+0x334>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003200:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <HAL_GPIO_Init+0x334>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003224:	4a12      	ldr	r2, [pc, #72]	@ (8003270 <HAL_GPIO_Init+0x334>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	f67f ae90 	bls.w	8002f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3724      	adds	r7, #36	@ 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	40013800 	.word	0x40013800
 8003250:	40020000 	.word	0x40020000
 8003254:	40020400 	.word	0x40020400
 8003258:	40020800 	.word	0x40020800
 800325c:	40020c00 	.word	0x40020c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40021400 	.word	0x40021400
 8003268:	40021800 	.word	0x40021800
 800326c:	40021c00 	.word	0x40021c00
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4013      	ands	r3, r2
 80032be:	041a      	lsls	r2, r3, #16
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	400b      	ands	r3, r1
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e12b      	b.n	8003546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe fae0 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	@ 0x24
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800332e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800333e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003340:	f002 face 	bl	80058e0 <HAL_RCC_GetPCLK1Freq>
 8003344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4a81      	ldr	r2, [pc, #516]	@ (8003550 <HAL_I2C_Init+0x274>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d807      	bhi.n	8003360 <HAL_I2C_Init+0x84>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a80      	ldr	r2, [pc, #512]	@ (8003554 <HAL_I2C_Init+0x278>)
 8003354:	4293      	cmp	r3, r2
 8003356:	bf94      	ite	ls
 8003358:	2301      	movls	r3, #1
 800335a:	2300      	movhi	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e006      	b.n	800336e <HAL_I2C_Init+0x92>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a7d      	ldr	r2, [pc, #500]	@ (8003558 <HAL_I2C_Init+0x27c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	bf94      	ite	ls
 8003368:	2301      	movls	r3, #1
 800336a:	2300      	movhi	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0e7      	b.n	8003546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a78      	ldr	r2, [pc, #480]	@ (800355c <HAL_I2C_Init+0x280>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0c9b      	lsrs	r3, r3, #18
 8003380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003550 <HAL_I2C_Init+0x274>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d802      	bhi.n	80033b0 <HAL_I2C_Init+0xd4>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	e009      	b.n	80033c4 <HAL_I2C_Init+0xe8>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	4a69      	ldr	r2, [pc, #420]	@ (8003560 <HAL_I2C_Init+0x284>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	3301      	adds	r3, #1
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	495c      	ldr	r1, [pc, #368]	@ (8003550 <HAL_I2C_Init+0x274>)
 80033e0:	428b      	cmp	r3, r1
 80033e2:	d819      	bhi.n	8003418 <HAL_I2C_Init+0x13c>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e59      	subs	r1, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f2:	1c59      	adds	r1, r3, #1
 80033f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033f8:	400b      	ands	r3, r1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_I2C_Init+0x138>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e59      	subs	r1, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fbb1 f3f3 	udiv	r3, r1, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003412:	e051      	b.n	80034b8 <HAL_I2C_Init+0x1dc>
 8003414:	2304      	movs	r3, #4
 8003416:	e04f      	b.n	80034b8 <HAL_I2C_Init+0x1dc>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d111      	bne.n	8003444 <HAL_I2C_Init+0x168>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e58      	subs	r0, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e012      	b.n	800346a <HAL_I2C_Init+0x18e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e58      	subs	r0, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	0099      	lsls	r1, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Init+0x196>
 800346e:	2301      	movs	r3, #1
 8003470:	e022      	b.n	80034b8 <HAL_I2C_Init+0x1dc>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10e      	bne.n	8003498 <HAL_I2C_Init+0x1bc>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1e58      	subs	r0, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	440b      	add	r3, r1
 8003488:	fbb0 f3f3 	udiv	r3, r0, r3
 800348c:	3301      	adds	r3, #1
 800348e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003496:	e00f      	b.n	80034b8 <HAL_I2C_Init+0x1dc>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1e58      	subs	r0, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	0099      	lsls	r1, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	6809      	ldr	r1, [r1, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6911      	ldr	r1, [r2, #16]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68d2      	ldr	r2, [r2, #12]
 80034f2:	4311      	orrs	r1, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	000186a0 	.word	0x000186a0
 8003554:	001e847f 	.word	0x001e847f
 8003558:	003d08ff 	.word	0x003d08ff
 800355c:	431bde83 	.word	0x431bde83
 8003560:	10624dd3 	.word	0x10624dd3

08003564 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	460b      	mov	r3, r1
 8003578:	813b      	strh	r3, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357e:	f7fe fc23 	bl	8001dc8 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b20      	cmp	r3, #32
 800358e:	f040 80d9 	bne.w	8003744 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2319      	movs	r3, #25
 8003598:	2201      	movs	r2, #1
 800359a:	496d      	ldr	r1, [pc, #436]	@ (8003750 <HAL_I2C_Mem_Write+0x1ec>)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fc8b 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0cc      	b.n	8003746 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_I2C_Mem_Write+0x56>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0c5      	b.n	8003746 <HAL_I2C_Mem_Write+0x1e2>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d007      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2221      	movs	r2, #33	@ 0x21
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2240      	movs	r2, #64	@ 0x40
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a4d      	ldr	r2, [pc, #308]	@ (8003754 <HAL_I2C_Mem_Write+0x1f0>)
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003622:	88f8      	ldrh	r0, [r7, #6]
 8003624:	893a      	ldrh	r2, [r7, #8]
 8003626:	8979      	ldrh	r1, [r7, #10]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4603      	mov	r3, r0
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fac2 	bl	8003bbc <I2C_RequestMemoryWrite>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d052      	beq.n	80036e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e081      	b.n	8003746 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fd50 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	2b04      	cmp	r3, #4
 8003658:	d107      	bne.n	800366a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003668:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06b      	b.n	8003746 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d11b      	bne.n	80036e4 <HAL_I2C_Mem_Write+0x180>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d017      	beq.n	80036e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1aa      	bne.n	8003642 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fd43 	bl	800417c <I2C_WaitOnBTFFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	2b04      	cmp	r3, #4
 8003702:	d107      	bne.n	8003714 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003712:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e016      	b.n	8003746 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	00100002 	.word	0x00100002
 8003754:	ffff0000 	.word	0xffff0000

08003758 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	@ 0x30
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	817b      	strh	r3, [r7, #10]
 800376a:	460b      	mov	r3, r1
 800376c:	813b      	strh	r3, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003772:	f7fe fb29 	bl	8001dc8 <HAL_GetTick>
 8003776:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b20      	cmp	r3, #32
 8003782:	f040 8214 	bne.w	8003bae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2319      	movs	r3, #25
 800378c:	2201      	movs	r2, #1
 800378e:	497b      	ldr	r1, [pc, #492]	@ (800397c <HAL_I2C_Mem_Read+0x224>)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fb91 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
 800379e:	e207      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Mem_Read+0x56>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e200      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d007      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2222      	movs	r2, #34	@ 0x22
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a5b      	ldr	r2, [pc, #364]	@ (8003980 <HAL_I2C_Mem_Read+0x228>)
 8003814:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003816:	88f8      	ldrh	r0, [r7, #6]
 8003818:	893a      	ldrh	r2, [r7, #8]
 800381a:	8979      	ldrh	r1, [r7, #10]
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4603      	mov	r3, r0
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fa5e 	bl	8003ce8 <I2C_RequestMemoryRead>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e1bc      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d113      	bne.n	8003866 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	623b      	str	r3, [r7, #32]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	623b      	str	r3, [r7, #32]
 8003852:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e190      	b.n	8003b88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	2b01      	cmp	r3, #1
 800386c:	d11b      	bne.n	80038a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e170      	b.n	8003b88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d11b      	bne.n	80038e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	e150      	b.n	8003b88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038fc:	e144      	b.n	8003b88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	2b03      	cmp	r3, #3
 8003904:	f200 80f1 	bhi.w	8003aea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390c:	2b01      	cmp	r3, #1
 800390e:	d123      	bne.n	8003958 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003912:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fc79 	bl	800420c <I2C_WaitOnRXNEFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e145      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003956:	e117      	b.n	8003b88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	2b02      	cmp	r3, #2
 800395e:	d14e      	bne.n	80039fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003966:	2200      	movs	r2, #0
 8003968:	4906      	ldr	r1, [pc, #24]	@ (8003984 <HAL_I2C_Mem_Read+0x22c>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 faa4 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e11a      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
 800397a:	bf00      	nop
 800397c:	00100002 	.word	0x00100002
 8003980:	ffff0000 	.word	0xffff0000
 8003984:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039fc:	e0c4      	b.n	8003b88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a04:	2200      	movs	r2, #0
 8003a06:	496c      	ldr	r1, [pc, #432]	@ (8003bb8 <HAL_I2C_Mem_Read+0x460>)
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fa55 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0cb      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	2200      	movs	r2, #0
 8003a62:	4955      	ldr	r1, [pc, #340]	@ (8003bb8 <HAL_I2C_Mem_Read+0x460>)
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fa27 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e09d      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ae8:	e04e      	b.n	8003b88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fb8c 	bl	800420c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e058      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d124      	bne.n	8003b88 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d107      	bne.n	8003b56 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f47f aeb6 	bne.w	80038fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3728      	adds	r7, #40	@ 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	00010004 	.word	0x00010004

08003bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	813b      	strh	r3, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f960 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0c:	d103      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e05f      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	492d      	ldr	r1, [pc, #180]	@ (8003ce4 <I2C_RequestMemoryWrite+0x128>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f9bb 	bl	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e04c      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa46 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e02b      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	e021      	b.n	8003cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa20 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e005      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	00010002 	.word	0x00010002

08003ce8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f8c2 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d48:	d103      	bne.n	8003d52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0aa      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	4952      	ldr	r1, [pc, #328]	@ (8003eb4 <I2C_RequestMemoryRead+0x1cc>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f91d 	bl	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e097      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f9a8 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e076      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
 8003dce:	e021      	b.n	8003e14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	6a39      	ldr	r1, [r7, #32]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f982 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d107      	bne.n	8003e06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e050      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e16:	6a39      	ldr	r1, [r7, #32]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f967 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d107      	bne.n	8003e3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e035      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f82b 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e76:	d103      	bne.n	8003e80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e013      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e84:	897b      	ldrh	r3, [r7, #10]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	4906      	ldr	r1, [pc, #24]	@ (8003eb4 <I2C_RequestMemoryRead+0x1cc>)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f886 	bl	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	00010002 	.word	0x00010002

08003eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec8:	e048      	b.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d044      	beq.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7fd ff79 	bl	8001dc8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d139      	bne.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d10d      	bne.n	8003f0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	e00c      	b.n	8003f28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d116      	bne.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e023      	b.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10d      	bne.n	8003f82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	e00c      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d093      	beq.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fba:	e071      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fca:	d123      	bne.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f043 0204 	orr.w	r2, r3, #4
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e067      	b.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d041      	beq.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fd fed4 	bl	8001dc8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d136      	bne.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10c      	bne.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e00b      	b.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	43da      	mvns	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4013      	ands	r3, r2
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e021      	b.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10c      	bne.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e00b      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4013      	ands	r3, r2
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f47f af6d 	bne.w	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f8:	e034      	b.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f8e3 	bl	80042c6 <I2C_IsAcknowledgeFailed>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e034      	b.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d028      	beq.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fd fe59 	bl	8001dc8 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004132:	2b80      	cmp	r3, #128	@ 0x80
 8004134:	d016      	beq.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b80      	cmp	r3, #128	@ 0x80
 8004170:	d1c3      	bne.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004188:	e034      	b.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f89b 	bl	80042c6 <I2C_IsAcknowledgeFailed>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e034      	b.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d028      	beq.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fd fe11 	bl	8001dc8 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11d      	bne.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d016      	beq.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e007      	b.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d1c3      	bne.n	800418a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004218:	e049      	b.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d119      	bne.n	800425c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0210 	mvn.w	r2, #16
 8004230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e030      	b.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425c:	f7fd fdb4 	bl	8001dc8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11d      	bne.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b40      	cmp	r3, #64	@ 0x40
 800427e:	d016      	beq.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e007      	b.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d1ae      	bne.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042dc:	d11b      	bne.n	8004316 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f043 0204 	orr.w	r2, r3, #4
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e128      	b.n	8004588 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a90      	ldr	r2, [pc, #576]	@ (8004590 <HAL_I2S_Init+0x26c>)
 800434e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fd fb01 	bl	8001958 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800436c:	f023 030f 	bic.w	r3, r3, #15
 8004370:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2202      	movs	r2, #2
 8004378:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d060      	beq.n	8004444 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800438a:	2310      	movs	r3, #16
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e001      	b.n	8004394 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b20      	cmp	r3, #32
 800439a:	d802      	bhi.n	80043a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f001 fb92 	bl	8005acc <HAL_RCCEx_GetPeriphCLKFreq>
 80043a8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b2:	d125      	bne.n	8004400 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	3305      	adds	r3, #5
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e01f      	b.n	800441e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	3305      	adds	r3, #5
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e00e      	b.n	800441e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fbb2 f2f3 	udiv	r2, r2, r3
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	3305      	adds	r3, #5
 800441c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4a5c      	ldr	r2, [pc, #368]	@ (8004594 <HAL_I2S_Init+0x270>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	e003      	b.n	800444c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004444:	2302      	movs	r3, #2
 8004446:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d902      	bls.n	8004458 <HAL_I2S_Init+0x134>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2bff      	cmp	r3, #255	@ 0xff
 8004456:	d907      	bls.n	8004468 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	f043 0210 	orr.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e08f      	b.n	8004588 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	ea42 0103 	orr.w	r1, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	430a      	orrs	r2, r1
 800447a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004486:	f023 030f 	bic.w	r3, r3, #15
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6851      	ldr	r1, [r2, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	4311      	orrs	r1, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68d2      	ldr	r2, [r2, #12]
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6992      	ldr	r2, [r2, #24]
 800449e:	430a      	orrs	r2, r1
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d161      	bne.n	8004578 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a38      	ldr	r2, [pc, #224]	@ (8004598 <HAL_I2S_Init+0x274>)
 80044b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a37      	ldr	r2, [pc, #220]	@ (800459c <HAL_I2S_Init+0x278>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_I2S_Init+0x1a4>
 80044c4:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 80044c6:	e001      	b.n	80044cc <HAL_I2S_Init+0x1a8>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	4932      	ldr	r1, [pc, #200]	@ (800459c <HAL_I2S_Init+0x278>)
 80044d4:	428a      	cmp	r2, r1
 80044d6:	d101      	bne.n	80044dc <HAL_I2S_Init+0x1b8>
 80044d8:	4a31      	ldr	r2, [pc, #196]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 80044da:	e001      	b.n	80044e0 <HAL_I2S_Init+0x1bc>
 80044dc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80044e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044e4:	f023 030f 	bic.w	r3, r3, #15
 80044e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2b      	ldr	r2, [pc, #172]	@ (800459c <HAL_I2S_Init+0x278>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d101      	bne.n	80044f8 <HAL_I2S_Init+0x1d4>
 80044f4:	4b2a      	ldr	r3, [pc, #168]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 80044f6:	e001      	b.n	80044fc <HAL_I2S_Init+0x1d8>
 80044f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044fc:	2202      	movs	r2, #2
 80044fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a25      	ldr	r2, [pc, #148]	@ (800459c <HAL_I2S_Init+0x278>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_I2S_Init+0x1ea>
 800450a:	4b25      	ldr	r3, [pc, #148]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 800450c:	e001      	b.n	8004512 <HAL_I2S_Init+0x1ee>
 800450e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451e:	d003      	beq.n	8004528 <HAL_I2S_Init+0x204>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e001      	b.n	8004534 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800453e:	4313      	orrs	r3, r2
 8004540:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004548:	4313      	orrs	r3, r2
 800454a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004552:	4313      	orrs	r3, r2
 8004554:	b29a      	uxth	r2, r3
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	4313      	orrs	r3, r2
 800455a:	b29b      	uxth	r3, r3
 800455c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004560:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0d      	ldr	r2, [pc, #52]	@ (800459c <HAL_I2S_Init+0x278>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_I2S_Init+0x24c>
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_I2S_Init+0x27c>)
 800456e:	e001      	b.n	8004574 <HAL_I2S_Init+0x250>
 8004570:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004574:	897a      	ldrh	r2, [r7, #10]
 8004576:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	0800469b 	.word	0x0800469b
 8004594:	cccccccd 	.word	0xcccccccd
 8004598:	08004a6d 	.word	0x08004a6d
 800459c:	40003800 	.word	0x40003800
 80045a0:	40003400 	.word	0x40003400

080045a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004624:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ffb8 	bl	80045a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	b292      	uxth	r2, r2
 8004650:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10e      	bne.n	8004692 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004682:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff93 	bl	80045b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d13a      	bne.n	800472c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d109      	bne.n	80046d4 <I2S_IRQHandler+0x3a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	d102      	bne.n	80046d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ffb4 	bl	800463c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d126      	bne.n	800472c <I2S_IRQHandler+0x92>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d11f      	bne.n	800472c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	f043 0202 	orr.w	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff50 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d136      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d109      	bne.n	8004756 <I2S_IRQHandler+0xbc>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b80      	cmp	r3, #128	@ 0x80
 800474e:	d102      	bne.n	8004756 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff45 	bl	80045e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b08      	cmp	r3, #8
 800475e:	d122      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b20      	cmp	r3, #32
 800476c:	d11b      	bne.n	80047a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800477c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff13 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d001      	beq.n	80047d6 <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
 80047d4:	e13c      	b.n	8004a50 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e131      	b.n	8004a50 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e129      	b.n	8004a50 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	61bb      	str	r3, [r7, #24]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d002      	beq.n	8004828 <HAL_I2SEx_TransmitReceive_DMA+0x78>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b05      	cmp	r3, #5
 8004826:	d114      	bne.n	8004852 <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004832:	887b      	ldrh	r3, [r7, #2]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800483c:	887b      	ldrh	r3, [r7, #2]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	865a      	strh	r2, [r3, #50]	@ 0x32
 8004850:	e00b      	b.n	800486a <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	887a      	ldrh	r2, [r7, #2]
 8004856:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	887a      	ldrh	r2, [r7, #2]
 8004862:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2205      	movs	r2, #5
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487c:	4a76      	ldr	r2, [pc, #472]	@ (8004a58 <HAL_I2SEx_TransmitReceive_DMA+0x2a8>)
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004884:	4a75      	ldr	r2, [pc, #468]	@ (8004a5c <HAL_I2SEx_TransmitReceive_DMA+0x2ac>)
 8004886:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	4a74      	ldr	r2, [pc, #464]	@ (8004a60 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 800488e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489c:	2200      	movs	r2, #0
 800489e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a60 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 80048a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	61bb      	str	r3, [r7, #24]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ba:	d002      	beq.n	80048c2 <HAL_I2SEx_TransmitReceive_DMA+0x112>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d144      	bne.n	800494c <HAL_I2SEx_TransmitReceive_DMA+0x19c>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80048c2:	1d3b      	adds	r3, r7, #4
 80048c4:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a65      	ldr	r2, [pc, #404]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_I2SEx_TransmitReceive_DMA+0x128>
 80048d4:	4b64      	ldr	r3, [pc, #400]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80048d6:	e001      	b.n	80048dc <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 80048d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048dc:	330c      	adds	r3, #12
 80048de:	4619      	mov	r1, r3
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f7fe f865 	bl	80029b8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <HAL_I2SEx_TransmitReceive_DMA+0x14c>
 80048f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80048fa:	e001      	b.n	8004900 <HAL_I2SEx_TransmitReceive_DMA+0x150>
 80048fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4957      	ldr	r1, [pc, #348]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8004908:	428b      	cmp	r3, r1
 800490a:	d101      	bne.n	8004910 <HAL_I2SEx_TransmitReceive_DMA+0x160>
 800490c:	4b56      	ldr	r3, [pc, #344]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800490e:	e001      	b.n	8004914 <HAL_I2SEx_TransmitReceive_DMA+0x164>
 8004910:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004934:	b29b      	uxth	r3, r3
 8004936:	f7fe f83f 	bl	80029b8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0202 	orr.w	r2, r2, #2
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e056      	b.n	80049fa <HAL_I2SEx_TransmitReceive_DMA+0x24a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800495a:	d10a      	bne.n	8004972 <HAL_I2SEx_TransmitReceive_DMA+0x1c2>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	697b      	ldr	r3, [r7, #20]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8004972:	f107 0308 	add.w	r3, r7, #8
 8004976:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a37      	ldr	r2, [pc, #220]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_I2SEx_TransmitReceive_DMA+0x1de>
 800498a:	4b37      	ldr	r3, [pc, #220]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800498c:	e001      	b.n	8004992 <HAL_I2SEx_TransmitReceive_DMA+0x1e2>
 800498e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004992:	330c      	adds	r3, #12
 8004994:	461a      	mov	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499a:	b29b      	uxth	r3, r3
 800499c:	f7fe f80c 	bl	80029b8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_I2SEx_TransmitReceive_DMA+0x1fe>
 80049aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80049ac:	e001      	b.n	80049b2 <HAL_I2SEx_TransmitReceive_DMA+0x202>
 80049ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	492a      	ldr	r1, [pc, #168]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80049ba:	428b      	cmp	r3, r1
 80049bc:	d101      	bne.n	80049c2 <HAL_I2SEx_TransmitReceive_DMA+0x212>
 80049be:	4b2a      	ldr	r3, [pc, #168]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80049c0:	e001      	b.n	80049c6 <HAL_I2SEx_TransmitReceive_DMA+0x216>
 80049c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049c6:	f042 0202 	orr.w	r2, r2, #2
 80049ca:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	4619      	mov	r1, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f7fd ffe7 	bl	80029b8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a10:	d01d      	beq.n	8004a4e <HAL_I2SEx_TransmitReceive_DMA+0x29e>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a13      	ldr	r2, [pc, #76]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <HAL_I2SEx_TransmitReceive_DMA+0x270>
 8004a1c:	4b12      	ldr	r3, [pc, #72]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8004a1e:	e001      	b.n	8004a24 <HAL_I2SEx_TransmitReceive_DMA+0x274>
 8004a20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	490e      	ldr	r1, [pc, #56]	@ (8004a64 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	d101      	bne.n	8004a34 <HAL_I2SEx_TransmitReceive_DMA+0x284>
 8004a30:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8004a32:	e001      	b.n	8004a38 <HAL_I2SEx_TransmitReceive_DMA+0x288>
 8004a34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a3c:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a4c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	08004d15 	.word	0x08004d15
 8004a5c:	08004d31 	.word	0x08004d31
 8004a60:	08004e09 	.word	0x08004e09
 8004a64:	40003800 	.word	0x40003800
 8004a68:	40003400 	.word	0x40003400

08004a6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a92      	ldr	r2, [pc, #584]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d101      	bne.n	8004a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004a86:	4b92      	ldr	r3, [pc, #584]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a88:	e001      	b.n	8004a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004a8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a8b      	ldr	r2, [pc, #556]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004aa4:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa6:	e001      	b.n	8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004aa8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab8:	d004      	beq.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 8099 	bne.w	8004bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d107      	bne.n	8004ade <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f9d5 	bl	8004e88 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d107      	bne.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa78 	bl	8004fe8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afe:	2b40      	cmp	r3, #64	@ 0x40
 8004b00:	d13a      	bne.n	8004b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d035      	beq.n	8004b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6e      	ldr	r2, [pc, #440]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d101      	bne.n	8004b1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b16:	4b6e      	ldr	r3, [pc, #440]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b18:	e001      	b.n	8004b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4969      	ldr	r1, [pc, #420]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b26:	428b      	cmp	r3, r1
 8004b28:	d101      	bne.n	8004b2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b2a:	4b69      	ldr	r3, [pc, #420]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b2c:	e001      	b.n	8004b32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fd2a 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	f040 80c3 	bne.w	8004d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80bd 	beq.w	8004d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a49      	ldr	r2, [pc, #292]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d101      	bne.n	8004bae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004baa:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bac:	e001      	b.n	8004bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004bae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4944      	ldr	r1, [pc, #272]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bba:	428b      	cmp	r3, r1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004bbe:	4b44      	ldr	r3, [pc, #272]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bc0:	e001      	b.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004bc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004bca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	f043 0204 	orr.w	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff fcec 	bl	80045cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bf4:	e089      	b.n	8004d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d107      	bne.n	8004c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f96e 	bl	8004eec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d107      	bne.n	8004c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f9ad 	bl	8004f84 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c30:	2b40      	cmp	r3, #64	@ 0x40
 8004c32:	d12f      	bne.n	8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d02a      	beq.n	8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c58:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c5a:	e001      	b.n	8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4919      	ldr	r1, [pc, #100]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d101      	bne.n	8004c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c6c:	4b18      	ldr	r3, [pc, #96]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c6e:	e001      	b.n	8004c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c74:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	f043 0202 	orr.w	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fc9c 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d136      	bne.n	8004d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d031      	beq.n	8004d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a07      	ldr	r2, [pc, #28]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004cb2:	4b07      	ldr	r3, [pc, #28]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cb4:	e001      	b.n	8004cba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4902      	ldr	r1, [pc, #8]	@ (8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d106      	bne.n	8004cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004cc6:	4b02      	ldr	r3, [pc, #8]	@ (8004cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cc8:	e006      	b.n	8004cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004cca:	bf00      	nop
 8004ccc:	40003800 	.word	0x40003800
 8004cd0:	40003400 	.word	0x40003400
 8004cd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cdc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f043 0204 	orr.w	r2, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fc62 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d08:	e000      	b.n	8004d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d0a:	bf00      	nop
}
 8004d0c:	bf00      	nop
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fc f95a 	bl	8000fdc <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d155      	bne.n	8004df2 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d54:	d006      	beq.n	8004d64 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11e      	bne.n	8004da2 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a25      	ldr	r2, [pc, #148]	@ (8004e00 <I2SEx_TxRxDMACplt+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <I2SEx_TxRxDMACplt+0x42>
 8004d6e:	4b25      	ldr	r3, [pc, #148]	@ (8004e04 <I2SEx_TxRxDMACplt+0xd4>)
 8004d70:	e001      	b.n	8004d76 <I2SEx_TxRxDMACplt+0x46>
 8004d72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4920      	ldr	r1, [pc, #128]	@ (8004e00 <I2SEx_TxRxDMACplt+0xd0>)
 8004d7e:	428b      	cmp	r3, r1
 8004d80:	d101      	bne.n	8004d86 <I2SEx_TxRxDMACplt+0x56>
 8004d82:	4b20      	ldr	r3, [pc, #128]	@ (8004e04 <I2SEx_TxRxDMACplt+0xd4>)
 8004d84:	e001      	b.n	8004d8a <I2SEx_TxRxDMACplt+0x5a>
 8004d86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0202 	bic.w	r2, r2, #2
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	e01d      	b.n	8004dde <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <I2SEx_TxRxDMACplt+0xd0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <I2SEx_TxRxDMACplt+0x90>
 8004dbc:	4b11      	ldr	r3, [pc, #68]	@ (8004e04 <I2SEx_TxRxDMACplt+0xd4>)
 8004dbe:	e001      	b.n	8004dc4 <I2SEx_TxRxDMACplt+0x94>
 8004dc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	490d      	ldr	r1, [pc, #52]	@ (8004e00 <I2SEx_TxRxDMACplt+0xd0>)
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d101      	bne.n	8004dd4 <I2SEx_TxRxDMACplt+0xa4>
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <I2SEx_TxRxDMACplt+0xd4>)
 8004dd2:	e001      	b.n	8004dd8 <I2SEx_TxRxDMACplt+0xa8>
 8004dd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dd8:	f022 0202 	bic.w	r2, r2, #2
 8004ddc:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7fc f910 	bl	8001018 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40003800 	.word	0x40003800
 8004e04:	40003400 	.word	0x40003400

08004e08 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0203 	bic.w	r2, r2, #3
 8004e24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <I2SEx_TxRxDMAError+0x78>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <I2SEx_TxRxDMAError+0x2c>
 8004e30:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <I2SEx_TxRxDMAError+0x7c>)
 8004e32:	e001      	b.n	8004e38 <I2SEx_TxRxDMAError+0x30>
 8004e34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4910      	ldr	r1, [pc, #64]	@ (8004e80 <I2SEx_TxRxDMAError+0x78>)
 8004e40:	428b      	cmp	r3, r1
 8004e42:	d101      	bne.n	8004e48 <I2SEx_TxRxDMAError+0x40>
 8004e44:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <I2SEx_TxRxDMAError+0x7c>)
 8004e46:	e001      	b.n	8004e4c <I2SEx_TxRxDMAError+0x44>
 8004e48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e4c:	f022 0203 	bic.w	r2, r2, #3
 8004e50:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	f043 0208 	orr.w	r2, r3, #8
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fbaa 	bl	80045cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40003800 	.word	0x40003800
 8004e84:	40003400 	.word	0x40003400

08004e88 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	1c99      	adds	r1, r3, #2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6251      	str	r1, [r2, #36]	@ 0x24
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d113      	bne.n	8004ee2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ec8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7fc f89b 	bl	8001018 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	1c99      	adds	r1, r3, #2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6251      	str	r1, [r2, #36]	@ 0x24
 8004efe:	8819      	ldrh	r1, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <I2SEx_TxISR_I2SExt+0x90>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <I2SEx_TxISR_I2SExt+0x22>
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004f80 <I2SEx_TxISR_I2SExt+0x94>)
 8004f0c:	e001      	b.n	8004f12 <I2SEx_TxISR_I2SExt+0x26>
 8004f0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f12:	460a      	mov	r2, r1
 8004f14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d121      	bne.n	8004f72 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a12      	ldr	r2, [pc, #72]	@ (8004f7c <I2SEx_TxISR_I2SExt+0x90>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <I2SEx_TxISR_I2SExt+0x50>
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <I2SEx_TxISR_I2SExt+0x94>)
 8004f3a:	e001      	b.n	8004f40 <I2SEx_TxISR_I2SExt+0x54>
 8004f3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	490d      	ldr	r1, [pc, #52]	@ (8004f7c <I2SEx_TxISR_I2SExt+0x90>)
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	d101      	bne.n	8004f50 <I2SEx_TxISR_I2SExt+0x64>
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <I2SEx_TxISR_I2SExt+0x94>)
 8004f4e:	e001      	b.n	8004f54 <I2SEx_TxISR_I2SExt+0x68>
 8004f50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fc f853 	bl	8001018 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40003800 	.word	0x40003800
 8004f80:	40003400 	.word	0x40003400

08004f84 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68d8      	ldr	r0, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	1c99      	adds	r1, r3, #2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004f9c:	b282      	uxth	r2, r0
 8004f9e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d113      	bne.n	8004fe0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fc6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc f81c 	bl	8001018 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <I2SEx_RxISR_I2SExt+0x90>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <I2SEx_RxISR_I2SExt+0x16>
 8004ffa:	4b20      	ldr	r3, [pc, #128]	@ (800507c <I2SEx_RxISR_I2SExt+0x94>)
 8004ffc:	e001      	b.n	8005002 <I2SEx_RxISR_I2SExt+0x1a>
 8004ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005002:	68d8      	ldr	r0, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005008:	1c99      	adds	r1, r3, #2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800500e:	b282      	uxth	r2, r0
 8005010:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d121      	bne.n	800506e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <I2SEx_RxISR_I2SExt+0x90>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <I2SEx_RxISR_I2SExt+0x50>
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <I2SEx_RxISR_I2SExt+0x94>)
 8005036:	e001      	b.n	800503c <I2SEx_RxISR_I2SExt+0x54>
 8005038:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	490d      	ldr	r1, [pc, #52]	@ (8005078 <I2SEx_RxISR_I2SExt+0x90>)
 8005044:	428b      	cmp	r3, r1
 8005046:	d101      	bne.n	800504c <I2SEx_RxISR_I2SExt+0x64>
 8005048:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <I2SEx_RxISR_I2SExt+0x94>)
 800504a:	e001      	b.n	8005050 <I2SEx_RxISR_I2SExt+0x68>
 800504c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005050:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005054:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fb ffd5 	bl	8001018 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40003800 	.word	0x40003800
 800507c:	40003400 	.word	0x40003400

08005080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e267      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d075      	beq.n	800518a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800509e:	4b88      	ldr	r3, [pc, #544]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d00c      	beq.n	80050c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050aa:	4b85      	ldr	r3, [pc, #532]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d112      	bne.n	80050dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b6:	4b82      	ldr	r3, [pc, #520]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c2:	d10b      	bne.n	80050dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	4b7e      	ldr	r3, [pc, #504]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d05b      	beq.n	8005188 <HAL_RCC_OscConfig+0x108>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d157      	bne.n	8005188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e242      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e4:	d106      	bne.n	80050f4 <HAL_RCC_OscConfig+0x74>
 80050e6:	4b76      	ldr	r3, [pc, #472]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a75      	ldr	r2, [pc, #468]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e01d      	b.n	8005130 <HAL_RCC_OscConfig+0xb0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050fc:	d10c      	bne.n	8005118 <HAL_RCC_OscConfig+0x98>
 80050fe:	4b70      	ldr	r3, [pc, #448]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6f      	ldr	r2, [pc, #444]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	4b6d      	ldr	r3, [pc, #436]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6c      	ldr	r2, [pc, #432]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e00b      	b.n	8005130 <HAL_RCC_OscConfig+0xb0>
 8005118:	4b69      	ldr	r3, [pc, #420]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a68      	ldr	r2, [pc, #416]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 800511e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b66      	ldr	r3, [pc, #408]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a65      	ldr	r2, [pc, #404]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 800512a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800512e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d013      	beq.n	8005160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fc fe46 	bl	8001dc8 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005140:	f7fc fe42 	bl	8001dc8 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	@ 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e207      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4b5b      	ldr	r3, [pc, #364]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0xc0>
 800515e:	e014      	b.n	800518a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005160:	f7fc fe32 	bl	8001dc8 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005168:	f7fc fe2e 	bl	8001dc8 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	@ 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e1f3      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517a:	4b51      	ldr	r3, [pc, #324]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0xe8>
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d063      	beq.n	800525e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005196:	4b4a      	ldr	r3, [pc, #296]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a2:	4b47      	ldr	r3, [pc, #284]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d11c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ae:	4b44      	ldr	r3, [pc, #272]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d116      	bne.n	80051e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	4b41      	ldr	r3, [pc, #260]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_RCC_OscConfig+0x152>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d001      	beq.n	80051d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e1c7      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d2:	4b3b      	ldr	r3, [pc, #236]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4937      	ldr	r1, [pc, #220]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e6:	e03a      	b.n	800525e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d020      	beq.n	8005232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f0:	4b34      	ldr	r3, [pc, #208]	@ (80052c4 <HAL_RCC_OscConfig+0x244>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fc fde7 	bl	8001dc8 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fe:	f7fc fde3 	bl	8001dc8 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e1a8      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005210:	4b2b      	ldr	r3, [pc, #172]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521c:	4b28      	ldr	r3, [pc, #160]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4925      	ldr	r1, [pc, #148]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 800522c:	4313      	orrs	r3, r2
 800522e:	600b      	str	r3, [r1, #0]
 8005230:	e015      	b.n	800525e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005232:	4b24      	ldr	r3, [pc, #144]	@ (80052c4 <HAL_RCC_OscConfig+0x244>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fc fdc6 	bl	8001dc8 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005240:	f7fc fdc2 	bl	8001dc8 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e187      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005252:	4b1b      	ldr	r3, [pc, #108]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d036      	beq.n	80052d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <HAL_RCC_OscConfig+0x248>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fc fda6 	bl	8001dc8 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005280:	f7fc fda2 	bl	8001dc8 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e167      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005292:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <HAL_RCC_OscConfig+0x240>)
 8005294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x200>
 800529e:	e01b      	b.n	80052d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a0:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_RCC_OscConfig+0x248>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a6:	f7fc fd8f 	bl	8001dc8 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ac:	e00e      	b.n	80052cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ae:	f7fc fd8b 	bl	8001dc8 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d907      	bls.n	80052cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e150      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
 80052c0:	40023800 	.word	0x40023800
 80052c4:	42470000 	.word	0x42470000
 80052c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052cc:	4b88      	ldr	r3, [pc, #544]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 80052ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ea      	bne.n	80052ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8097 	beq.w	8005414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ea:	4b81      	ldr	r3, [pc, #516]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10f      	bne.n	8005316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	4b7d      	ldr	r3, [pc, #500]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	4a7c      	ldr	r2, [pc, #496]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005304:	6413      	str	r3, [r2, #64]	@ 0x40
 8005306:	4b7a      	ldr	r3, [pc, #488]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005316:	4b77      	ldr	r3, [pc, #476]	@ (80054f4 <HAL_RCC_OscConfig+0x474>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d118      	bne.n	8005354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005322:	4b74      	ldr	r3, [pc, #464]	@ (80054f4 <HAL_RCC_OscConfig+0x474>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a73      	ldr	r2, [pc, #460]	@ (80054f4 <HAL_RCC_OscConfig+0x474>)
 8005328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800532c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532e:	f7fc fd4b 	bl	8001dc8 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005336:	f7fc fd47 	bl	8001dc8 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e10c      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005348:	4b6a      	ldr	r3, [pc, #424]	@ (80054f4 <HAL_RCC_OscConfig+0x474>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d106      	bne.n	800536a <HAL_RCC_OscConfig+0x2ea>
 800535c:	4b64      	ldr	r3, [pc, #400]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005360:	4a63      	ldr	r2, [pc, #396]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	6713      	str	r3, [r2, #112]	@ 0x70
 8005368:	e01c      	b.n	80053a4 <HAL_RCC_OscConfig+0x324>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b05      	cmp	r3, #5
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0x30c>
 8005372:	4b5f      	ldr	r3, [pc, #380]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005376:	4a5e      	ldr	r2, [pc, #376]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005378:	f043 0304 	orr.w	r3, r3, #4
 800537c:	6713      	str	r3, [r2, #112]	@ 0x70
 800537e:	4b5c      	ldr	r3, [pc, #368]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005382:	4a5b      	ldr	r2, [pc, #364]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	6713      	str	r3, [r2, #112]	@ 0x70
 800538a:	e00b      	b.n	80053a4 <HAL_RCC_OscConfig+0x324>
 800538c:	4b58      	ldr	r3, [pc, #352]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005390:	4a57      	ldr	r2, [pc, #348]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	6713      	str	r3, [r2, #112]	@ 0x70
 8005398:	4b55      	ldr	r3, [pc, #340]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539c:	4a54      	ldr	r2, [pc, #336]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 800539e:	f023 0304 	bic.w	r3, r3, #4
 80053a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d015      	beq.n	80053d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fc fd0c 	bl	8001dc8 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fc fd08 	bl	8001dc8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0cb      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ca:	4b49      	ldr	r3, [pc, #292]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0ee      	beq.n	80053b4 <HAL_RCC_OscConfig+0x334>
 80053d6:	e014      	b.n	8005402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d8:	f7fc fcf6 	bl	8001dc8 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053de:	e00a      	b.n	80053f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fc fcf2 	bl	8001dc8 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e0b5      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f6:	4b3e      	ldr	r3, [pc, #248]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1ee      	bne.n	80053e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d105      	bne.n	8005414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005408:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	4a38      	ldr	r2, [pc, #224]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 800540e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005412:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80a1 	beq.w	8005560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800541e:	4b34      	ldr	r3, [pc, #208]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b08      	cmp	r3, #8
 8005428:	d05c      	beq.n	80054e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d141      	bne.n	80054b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005432:	4b31      	ldr	r3, [pc, #196]	@ (80054f8 <HAL_RCC_OscConfig+0x478>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fc fcc6 	bl	8001dc8 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005440:	f7fc fcc2 	bl	8001dc8 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e087      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	4b27      	ldr	r3, [pc, #156]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	019b      	lsls	r3, r3, #6
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	3b01      	subs	r3, #1
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	061b      	lsls	r3, r3, #24
 8005482:	491b      	ldr	r1, [pc, #108]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <HAL_RCC_OscConfig+0x478>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fc fc9b 	bl	8001dc8 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005496:	f7fc fc97 	bl	8001dc8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e05c      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x416>
 80054b4:	e054      	b.n	8005560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b6:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <HAL_RCC_OscConfig+0x478>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fc fc84 	bl	8001dc8 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c4:	f7fc fc80 	bl	8001dc8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e045      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <HAL_RCC_OscConfig+0x470>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x444>
 80054e2:	e03d      	b.n	8005560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d107      	bne.n	80054fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e038      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40007000 	.word	0x40007000
 80054f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054fc:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <HAL_RCC_OscConfig+0x4ec>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d028      	beq.n	800555c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d121      	bne.n	800555c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d11a      	bne.n	800555c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005534:	4293      	cmp	r3, r2
 8005536:	d111      	bne.n	800555c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	3b01      	subs	r3, #1
 8005546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d107      	bne.n	800555c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40023800 	.word	0x40023800

08005570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0cc      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005584:	4b68      	ldr	r3, [pc, #416]	@ (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d90c      	bls.n	80055ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005592:	4b65      	ldr	r3, [pc, #404]	@ (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b63      	ldr	r3, [pc, #396]	@ (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0b8      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d020      	beq.n	80055fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c4:	4b59      	ldr	r3, [pc, #356]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a58      	ldr	r2, [pc, #352]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055dc:	4b53      	ldr	r3, [pc, #332]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4a52      	ldr	r2, [pc, #328]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e8:	4b50      	ldr	r3, [pc, #320]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	494d      	ldr	r1, [pc, #308]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d044      	beq.n	8005690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560e:	4b47      	ldr	r3, [pc, #284]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d119      	bne.n	800564e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e07f      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d003      	beq.n	800562e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562a:	2b03      	cmp	r3, #3
 800562c:	d107      	bne.n	800563e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562e:	4b3f      	ldr	r3, [pc, #252]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e06f      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563e:	4b3b      	ldr	r3, [pc, #236]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e067      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800564e:	4b37      	ldr	r3, [pc, #220]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f023 0203 	bic.w	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4934      	ldr	r1, [pc, #208]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	4313      	orrs	r3, r2
 800565e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005660:	f7fc fbb2 	bl	8001dc8 <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	e00a      	b.n	800567e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005668:	f7fc fbae 	bl	8001dc8 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e04f      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567e:	4b2b      	ldr	r3, [pc, #172]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 020c 	and.w	r2, r3, #12
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	429a      	cmp	r2, r3
 800568e:	d1eb      	bne.n	8005668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005690:	4b25      	ldr	r3, [pc, #148]	@ (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d20c      	bcs.n	80056b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569e:	4b22      	ldr	r3, [pc, #136]	@ (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a6:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e032      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c4:	4b19      	ldr	r3, [pc, #100]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4916      	ldr	r1, [pc, #88]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056e2:	4b12      	ldr	r3, [pc, #72]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	490e      	ldr	r1, [pc, #56]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056f6:	f000 f821 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	490a      	ldr	r1, [pc, #40]	@ (8005730 <HAL_RCC_ClockConfig+0x1c0>)
 8005708:	5ccb      	ldrb	r3, [r1, r3]
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <HAL_RCC_ClockConfig+0x1c4>)
 8005710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005712:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_RCC_ClockConfig+0x1c8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc fb12 	bl	8001d40 <HAL_InitTick>

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40023c00 	.word	0x40023c00
 800572c:	40023800 	.word	0x40023800
 8005730:	08006fac 	.word	0x08006fac
 8005734:	20000000 	.word	0x20000000
 8005738:	20000004 	.word	0x20000004

0800573c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800573c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005740:	b090      	sub	sp, #64	@ 0x40
 8005742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005754:	4b59      	ldr	r3, [pc, #356]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 030c 	and.w	r3, r3, #12
 800575c:	2b08      	cmp	r3, #8
 800575e:	d00d      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x40>
 8005760:	2b08      	cmp	r3, #8
 8005762:	f200 80a1 	bhi.w	80058a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0x34>
 800576a:	2b04      	cmp	r3, #4
 800576c:	d003      	beq.n	8005776 <HAL_RCC_GetSysClockFreq+0x3a>
 800576e:	e09b      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005770:	4b53      	ldr	r3, [pc, #332]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005772:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005774:	e09b      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005776:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005778:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800577a:	e098      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800577c:	4b4f      	ldr	r3, [pc, #316]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x180>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005784:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005786:	4b4d      	ldr	r3, [pc, #308]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d028      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005792:	4b4a      	ldr	r3, [pc, #296]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	2200      	movs	r2, #0
 800579a:	623b      	str	r3, [r7, #32]
 800579c:	627a      	str	r2, [r7, #36]	@ 0x24
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057a4:	2100      	movs	r1, #0
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80057a8:	fb03 f201 	mul.w	r2, r3, r1
 80057ac:	2300      	movs	r3, #0
 80057ae:	fb00 f303 	mul.w	r3, r0, r3
 80057b2:	4413      	add	r3, r2
 80057b4:	4a43      	ldr	r2, [pc, #268]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80057b6:	fba0 1202 	umull	r1, r2, r0, r2
 80057ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057bc:	460a      	mov	r2, r1
 80057be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80057c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c2:	4413      	add	r3, r2
 80057c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	2200      	movs	r2, #0
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	61fa      	str	r2, [r7, #28]
 80057ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80057d6:	f7fb f82d 	bl	8000834 <__aeabi_uldivmod>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4613      	mov	r3, r2
 80057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057e2:	e053      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057e4:	4b35      	ldr	r3, [pc, #212]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x180>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	099b      	lsrs	r3, r3, #6
 80057ea:	2200      	movs	r2, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	617a      	str	r2, [r7, #20]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057f6:	f04f 0b00 	mov.w	fp, #0
 80057fa:	4652      	mov	r2, sl
 80057fc:	465b      	mov	r3, fp
 80057fe:	f04f 0000 	mov.w	r0, #0
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	0159      	lsls	r1, r3, #5
 8005808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800580c:	0150      	lsls	r0, r2, #5
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	ebb2 080a 	subs.w	r8, r2, sl
 8005816:	eb63 090b 	sbc.w	r9, r3, fp
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005826:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800582a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800582e:	ebb2 0408 	subs.w	r4, r2, r8
 8005832:	eb63 0509 	sbc.w	r5, r3, r9
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	00eb      	lsls	r3, r5, #3
 8005840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005844:	00e2      	lsls	r2, r4, #3
 8005846:	4614      	mov	r4, r2
 8005848:	461d      	mov	r5, r3
 800584a:	eb14 030a 	adds.w	r3, r4, sl
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	eb45 030b 	adc.w	r3, r5, fp
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005862:	4629      	mov	r1, r5
 8005864:	028b      	lsls	r3, r1, #10
 8005866:	4621      	mov	r1, r4
 8005868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800586c:	4621      	mov	r1, r4
 800586e:	028a      	lsls	r2, r1, #10
 8005870:	4610      	mov	r0, r2
 8005872:	4619      	mov	r1, r3
 8005874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005876:	2200      	movs	r2, #0
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005880:	f7fa ffd8 	bl	8000834 <__aeabi_uldivmod>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4613      	mov	r3, r2
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x180>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	3301      	adds	r3, #1
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800589c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058a6:	e002      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80058aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3740      	adds	r7, #64	@ 0x40
 80058b4:	46bd      	mov	sp, r7
 80058b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800
 80058c0:	00f42400 	.word	0x00f42400
 80058c4:	017d7840 	.word	0x017d7840

080058c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058cc:	4b03      	ldr	r3, [pc, #12]	@ (80058dc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000000 	.word	0x20000000

080058e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058e4:	f7ff fff0 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	0a9b      	lsrs	r3, r3, #10
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	4903      	ldr	r1, [pc, #12]	@ (8005904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f6:	5ccb      	ldrb	r3, [r1, r3]
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	08006fbc 	.word	0x08006fbc

08005908 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800592c:	2b00      	cmp	r3, #0
 800592e:	d035      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005930:	4b62      	ldr	r3, [pc, #392]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005936:	f7fc fa47 	bl	8001dc8 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800593c:	e008      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800593e:	f7fc fa43 	bl	8001dc8 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e0b0      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005950:	4b5b      	ldr	r3, [pc, #364]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f0      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	019a      	lsls	r2, r3, #6
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	071b      	lsls	r3, r3, #28
 8005968:	4955      	ldr	r1, [pc, #340]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005970:	4b52      	ldr	r3, [pc, #328]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005976:	f7fc fa27 	bl	8001dc8 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800597e:	f7fc fa23 	bl	8001dc8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e090      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005990:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8083 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	4b44      	ldr	r3, [pc, #272]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	4a43      	ldr	r2, [pc, #268]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ba:	4b41      	ldr	r3, [pc, #260]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059c6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a3e      	ldr	r2, [pc, #248]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059d2:	f7fc f9f9 	bl	8001dc8 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059d8:	e008      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059da:	f7fc f9f5 	bl	8001dc8 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e062      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059ec:	4b35      	ldr	r3, [pc, #212]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059f8:	4b31      	ldr	r3, [pc, #196]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a00:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02f      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d028      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a16:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a20:	4b29      	ldr	r3, [pc, #164]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a26:	4b28      	ldr	r3, [pc, #160]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a2c:	4a24      	ldr	r2, [pc, #144]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a32:	4b23      	ldr	r3, [pc, #140]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d114      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fc f9c3 	bl	8001dc8 <HAL_GetTick>
 8005a42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a46:	f7fc f9bf 	bl	8001dc8 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e02a      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5c:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0ee      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a74:	d10d      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8a:	490d      	ldr	r1, [pc, #52]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]
 8005a90:	e005      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a92:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a98:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a9c:	6093      	str	r3, [r2, #8]
 8005a9e:	4b08      	ldr	r3, [pc, #32]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aaa:	4905      	ldr	r1, [pc, #20]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	42470068 	.word	0x42470068
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40007000 	.word	0x40007000
 8005ac8:	42470e40 	.word	0x42470e40

08005acc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d13f      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005aea:	4b24      	ldr	r3, [pc, #144]	@ (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b00:	d12f      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b02:	4b1f      	ldr	r3, [pc, #124]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b04:	617b      	str	r3, [r7, #20]
          break;
 8005b06:	e02f      	b.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b08:	4b1c      	ldr	r3, [pc, #112]	@ (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b14:	d108      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b16:	4b19      	ldr	r3, [pc, #100]	@ (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b1e:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	e007      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b28:	4b14      	ldr	r3, [pc, #80]	@ (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b30:	4a15      	ldr	r2, [pc, #84]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b38:	4b10      	ldr	r3, [pc, #64]	@ (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b52:	0f1b      	lsrs	r3, r3, #28
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	617b      	str	r3, [r7, #20]
          break;
 8005b60:	e002      	b.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
          break;
 8005b66:	bf00      	nop
        }
      }
      break;
 8005b68:	e000      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005b6a:	bf00      	nop
    }
  }
  return frequency;
 8005b6c:	697b      	ldr	r3, [r7, #20]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	00bb8000 	.word	0x00bb8000
 8005b84:	017d7840 	.word	0x017d7840
 8005b88:	00f42400 	.word	0x00f42400

08005b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e041      	b.n	8005c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fb ffcc 	bl	8001b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f000 fa80 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e046      	b.n	8005cd2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a23      	ldr	r2, [pc, #140]	@ (8005ce0 <HAL_TIM_Base_Start+0xb4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d022      	beq.n	8005c9c <HAL_TIM_Base_Start+0x70>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5e:	d01d      	beq.n	8005c9c <HAL_TIM_Base_Start+0x70>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce4 <HAL_TIM_Base_Start+0xb8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d018      	beq.n	8005c9c <HAL_TIM_Base_Start+0x70>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce8 <HAL_TIM_Base_Start+0xbc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <HAL_TIM_Base_Start+0x70>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1c      	ldr	r2, [pc, #112]	@ (8005cec <HAL_TIM_Base_Start+0xc0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00e      	beq.n	8005c9c <HAL_TIM_Base_Start+0x70>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf0 <HAL_TIM_Base_Start+0xc4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d009      	beq.n	8005c9c <HAL_TIM_Base_Start+0x70>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	@ (8005cf4 <HAL_TIM_Base_Start+0xc8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <HAL_TIM_Base_Start+0x70>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <HAL_TIM_Base_Start+0xcc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d111      	bne.n	8005cc0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b06      	cmp	r3, #6
 8005cac:	d010      	beq.n	8005cd0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbe:	e007      	b.n	8005cd0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40000c00 	.word	0x40000c00
 8005cf0:	40010400 	.word	0x40010400
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40001800 	.word	0x40001800

08005cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d020      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01b      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0202 	mvn.w	r2, #2
 8005d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9a3 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f995 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f9a6 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d020      	beq.n	8005dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01b      	beq.n	8005dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0204 	mvn.w	r2, #4
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f97d 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f96f 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f980 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d020      	beq.n	8005df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01b      	beq.n	8005df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0208 	mvn.w	r2, #8
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f957 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f949 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f95a 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d020      	beq.n	8005e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01b      	beq.n	8005e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0210 	mvn.w	r2, #16
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2208      	movs	r2, #8
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f931 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f923 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f934 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0201 	mvn.w	r2, #1
 8005e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f901 	bl	800606a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00c      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 faee 	bl	8006468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00c      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f905 	bl	80060ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0220 	mvn.w	r2, #32
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fac0 	bl	8006454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e0b4      	b.n	8006062 <HAL_TIM_ConfigClockSource+0x186>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f30:	d03e      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f36:	f200 8087 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3e:	f000 8086 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x172>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f46:	d87f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b70      	cmp	r3, #112	@ 0x70
 8005f4a:	d01a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xa6>
 8005f4c:	2b70      	cmp	r3, #112	@ 0x70
 8005f4e:	d87b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b60      	cmp	r3, #96	@ 0x60
 8005f52:	d050      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f54:	2b60      	cmp	r3, #96	@ 0x60
 8005f56:	d877      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f58:	2b50      	cmp	r3, #80	@ 0x50
 8005f5a:	d03c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f5c:	2b50      	cmp	r3, #80	@ 0x50
 8005f5e:	d873      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b40      	cmp	r3, #64	@ 0x40
 8005f62:	d058      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0x13a>
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d86f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b30      	cmp	r3, #48	@ 0x30
 8005f6a:	d064      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f6c:	2b30      	cmp	r3, #48	@ 0x30
 8005f6e:	d86b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d060      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d867      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d05c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d05a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	e062      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f92:	f000 f9c3 	bl	800631c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
      break;
 8005fae:	e04f      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc0:	f000 f9ac 	bl	800631c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e03c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f000 f920 	bl	8006228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2150      	movs	r1, #80	@ 0x50
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f979 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 8005ff4:	e02c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006002:	461a      	mov	r2, r3
 8006004:	f000 f93f 	bl	8006286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2160      	movs	r1, #96	@ 0x60
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f969 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 8006014:	e01c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	461a      	mov	r2, r3
 8006024:	f000 f900 	bl	8006228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	@ 0x40
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f959 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 8006034:	e00c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f000 f950 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 8006046:	e003      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e000      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800604e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a46      	ldr	r2, [pc, #280]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ee:	d00f      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a43      	ldr	r2, [pc, #268]	@ (8006200 <TIM_Base_SetConfig+0x130>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a42      	ldr	r2, [pc, #264]	@ (8006204 <TIM_Base_SetConfig+0x134>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a41      	ldr	r2, [pc, #260]	@ (8006208 <TIM_Base_SetConfig+0x138>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a40      	ldr	r2, [pc, #256]	@ (800620c <TIM_Base_SetConfig+0x13c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d108      	bne.n	8006122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a35      	ldr	r2, [pc, #212]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006130:	d027      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a32      	ldr	r2, [pc, #200]	@ (8006200 <TIM_Base_SetConfig+0x130>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d023      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a31      	ldr	r2, [pc, #196]	@ (8006204 <TIM_Base_SetConfig+0x134>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <TIM_Base_SetConfig+0x138>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2f      	ldr	r2, [pc, #188]	@ (800620c <TIM_Base_SetConfig+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d017      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2e      	ldr	r2, [pc, #184]	@ (8006210 <TIM_Base_SetConfig+0x140>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2d      	ldr	r2, [pc, #180]	@ (8006214 <TIM_Base_SetConfig+0x144>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2c      	ldr	r2, [pc, #176]	@ (8006218 <TIM_Base_SetConfig+0x148>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2b      	ldr	r2, [pc, #172]	@ (800621c <TIM_Base_SetConfig+0x14c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d007      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2a      	ldr	r2, [pc, #168]	@ (8006220 <TIM_Base_SetConfig+0x150>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a29      	ldr	r2, [pc, #164]	@ (8006224 <TIM_Base_SetConfig+0x154>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d108      	bne.n	8006194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a10      	ldr	r2, [pc, #64]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0xf8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a12      	ldr	r2, [pc, #72]	@ (800620c <TIM_Base_SetConfig+0x13c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]
  }
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40010400 	.word	0x40010400
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800
 800621c:	40001800 	.word	0x40001800
 8006220:	40001c00 	.word	0x40001c00
 8006224:	40002000 	.word	0x40002000

08006228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0201 	bic.w	r2, r3, #1
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 030a 	bic.w	r3, r3, #10
 8006264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006286:	b480      	push	{r7}
 8006288:	b087      	sub	sp, #28
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f023 0210 	bic.w	r2, r3, #16
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	031b      	lsls	r3, r3, #12
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	f043 0307 	orr.w	r3, r3, #7
 8006308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	609a      	str	r2, [r3, #8]
}
 8006310:	bf00      	nop
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	021a      	lsls	r2, r3, #8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	431a      	orrs	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	609a      	str	r2, [r3, #8]
}
 8006350:	bf00      	nop
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006370:	2302      	movs	r3, #2
 8006372:	e05a      	b.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a21      	ldr	r2, [pc, #132]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c0:	d01d      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1d      	ldr	r2, [pc, #116]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a17      	ldr	r2, [pc, #92]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a15      	ldr	r2, [pc, #84]	@ (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d10c      	bne.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4313      	orrs	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40010400 	.word	0x40010400
 800644c:	40014000 	.word	0x40014000
 8006450:	40001800 	.word	0x40001800

08006454 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <memset>:
 800647c:	4402      	add	r2, r0
 800647e:	4603      	mov	r3, r0
 8006480:	4293      	cmp	r3, r2
 8006482:	d100      	bne.n	8006486 <memset+0xa>
 8006484:	4770      	bx	lr
 8006486:	f803 1b01 	strb.w	r1, [r3], #1
 800648a:	e7f9      	b.n	8006480 <memset+0x4>

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	@ (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	@ (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	@ (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	@ (80064d0 <__libc_init_array+0x44>)
 80064a0:	f000 fd78 	bl	8006f94 <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	080073a4 	.word	0x080073a4
 80064c8:	080073a4 	.word	0x080073a4
 80064cc:	080073a4 	.word	0x080073a4
 80064d0:	080073a8 	.word	0x080073a8

080064d4 <tanf>:
 80064d4:	ee10 3a10 	vmov	r3, s0
 80064d8:	b507      	push	{r0, r1, r2, lr}
 80064da:	4a12      	ldr	r2, [pc, #72]	@ (8006524 <tanf+0x50>)
 80064dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d807      	bhi.n	80064f4 <tanf+0x20>
 80064e4:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8006528 <tanf+0x54>
 80064e8:	2001      	movs	r0, #1
 80064ea:	b003      	add	sp, #12
 80064ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f0:	f000 b81c 	b.w	800652c <__kernel_tanf>
 80064f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80064f8:	d304      	bcc.n	8006504 <tanf+0x30>
 80064fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80064fe:	b003      	add	sp, #12
 8006500:	f85d fb04 	ldr.w	pc, [sp], #4
 8006504:	4668      	mov	r0, sp
 8006506:	f000 f8f1 	bl	80066ec <__ieee754_rem_pio2f>
 800650a:	0040      	lsls	r0, r0, #1
 800650c:	f000 0002 	and.w	r0, r0, #2
 8006510:	eddd 0a01 	vldr	s1, [sp, #4]
 8006514:	ed9d 0a00 	vldr	s0, [sp]
 8006518:	f1c0 0001 	rsb	r0, r0, #1
 800651c:	f000 f806 	bl	800652c <__kernel_tanf>
 8006520:	e7ed      	b.n	80064fe <tanf+0x2a>
 8006522:	bf00      	nop
 8006524:	3f490fda 	.word	0x3f490fda
 8006528:	00000000 	.word	0x00000000

0800652c <__kernel_tanf>:
 800652c:	b508      	push	{r3, lr}
 800652e:	ee10 3a10 	vmov	r3, s0
 8006532:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006536:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800653a:	eef0 7a40 	vmov.f32	s15, s0
 800653e:	d217      	bcs.n	8006570 <__kernel_tanf+0x44>
 8006540:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8006544:	ee17 1a10 	vmov	r1, s14
 8006548:	bb41      	cbnz	r1, 800659c <__kernel_tanf+0x70>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	4313      	orrs	r3, r2
 800654e:	d108      	bne.n	8006562 <__kernel_tanf+0x36>
 8006550:	f000 f9fc 	bl	800694c <fabsf>
 8006554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006558:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800655c:	eeb0 0a67 	vmov.f32	s0, s15
 8006560:	bd08      	pop	{r3, pc}
 8006562:	2801      	cmp	r0, #1
 8006564:	d0fa      	beq.n	800655c <__kernel_tanf+0x30>
 8006566:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800656a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800656e:	e7f5      	b.n	800655c <__kernel_tanf+0x30>
 8006570:	494c      	ldr	r1, [pc, #304]	@ (80066a4 <__kernel_tanf+0x178>)
 8006572:	428a      	cmp	r2, r1
 8006574:	d312      	bcc.n	800659c <__kernel_tanf+0x70>
 8006576:	2b00      	cmp	r3, #0
 8006578:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80066a8 <__kernel_tanf+0x17c>
 800657c:	bfb8      	it	lt
 800657e:	eef1 7a40 	vneglt.f32	s15, s0
 8006582:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006586:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80066ac <__kernel_tanf+0x180>
 800658a:	bfb8      	it	lt
 800658c:	eef1 0a60 	vneglt.f32	s1, s1
 8006590:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006594:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80066b0 <__kernel_tanf+0x184>
 8006598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800659c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80065a0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80066b4 <__kernel_tanf+0x188>
 80065a4:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80066b8 <__kernel_tanf+0x18c>
 80065a8:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 80066bc <__kernel_tanf+0x190>
 80065ac:	493d      	ldr	r1, [pc, #244]	@ (80066a4 <__kernel_tanf+0x178>)
 80065ae:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80065b2:	428a      	cmp	r2, r1
 80065b4:	eea7 6a25 	vfma.f32	s12, s14, s11
 80065b8:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80066c0 <__kernel_tanf+0x194>
 80065bc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80065c0:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80066c4 <__kernel_tanf+0x198>
 80065c4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80065c8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80066c8 <__kernel_tanf+0x19c>
 80065cc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80065d0:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80066cc <__kernel_tanf+0x1a0>
 80065d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80065d8:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80066d0 <__kernel_tanf+0x1a4>
 80065dc:	eee7 5a05 	vfma.f32	s11, s14, s10
 80065e0:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80066d4 <__kernel_tanf+0x1a8>
 80065e4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80065e8:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80066d8 <__kernel_tanf+0x1ac>
 80065ec:	eee5 5a07 	vfma.f32	s11, s10, s14
 80065f0:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80066dc <__kernel_tanf+0x1b0>
 80065f4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80065f8:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80066e0 <__kernel_tanf+0x1b4>
 80065fc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8006600:	eeb0 7a46 	vmov.f32	s14, s12
 8006604:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006608:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800660c:	eeb0 6a60 	vmov.f32	s12, s1
 8006610:	eea7 6a05 	vfma.f32	s12, s14, s10
 8006614:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80066e4 <__kernel_tanf+0x1b8>
 8006618:	eee6 0a26 	vfma.f32	s1, s12, s13
 800661c:	eee5 0a07 	vfma.f32	s1, s10, s14
 8006620:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8006624:	d31d      	bcc.n	8006662 <__kernel_tanf+0x136>
 8006626:	ee07 0a10 	vmov	s14, r0
 800662a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800662e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8006632:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006636:	179b      	asrs	r3, r3, #30
 8006638:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	f1c3 0301 	rsb	r3, r3, #1
 8006644:	ee06 3a90 	vmov	s13, r3
 8006648:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800664c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006650:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006654:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8006658:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800665c:	ee66 7a87 	vmul.f32	s15, s13, s14
 8006660:	e77c      	b.n	800655c <__kernel_tanf+0x30>
 8006662:	2801      	cmp	r0, #1
 8006664:	d01b      	beq.n	800669e <__kernel_tanf+0x172>
 8006666:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <__kernel_tanf+0x1bc>)
 8006668:	ee16 2a10 	vmov	r2, s12
 800666c:	401a      	ands	r2, r3
 800666e:	ee05 2a90 	vmov	s11, r2
 8006672:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800667a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800667e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8006682:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006686:	ee16 2a90 	vmov	r2, s13
 800668a:	4013      	ands	r3, r2
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006694:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8006698:	eee7 7a26 	vfma.f32	s15, s14, s13
 800669c:	e75e      	b.n	800655c <__kernel_tanf+0x30>
 800669e:	eef0 7a46 	vmov.f32	s15, s12
 80066a2:	e75b      	b.n	800655c <__kernel_tanf+0x30>
 80066a4:	3f2ca140 	.word	0x3f2ca140
 80066a8:	3f490fda 	.word	0x3f490fda
 80066ac:	33222168 	.word	0x33222168
 80066b0:	00000000 	.word	0x00000000
 80066b4:	b79bae5f 	.word	0xb79bae5f
 80066b8:	38a3f445 	.word	0x38a3f445
 80066bc:	37d95384 	.word	0x37d95384
 80066c0:	3a1a26c8 	.word	0x3a1a26c8
 80066c4:	3b6b6916 	.word	0x3b6b6916
 80066c8:	3cb327a4 	.word	0x3cb327a4
 80066cc:	3e088889 	.word	0x3e088889
 80066d0:	3895c07a 	.word	0x3895c07a
 80066d4:	398137b9 	.word	0x398137b9
 80066d8:	3abede48 	.word	0x3abede48
 80066dc:	3c11371f 	.word	0x3c11371f
 80066e0:	3d5d0dd1 	.word	0x3d5d0dd1
 80066e4:	3eaaaaab 	.word	0x3eaaaaab
 80066e8:	fffff000 	.word	0xfffff000

080066ec <__ieee754_rem_pio2f>:
 80066ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ee:	ee10 6a10 	vmov	r6, s0
 80066f2:	4b88      	ldr	r3, [pc, #544]	@ (8006914 <__ieee754_rem_pio2f+0x228>)
 80066f4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80066f8:	429d      	cmp	r5, r3
 80066fa:	b087      	sub	sp, #28
 80066fc:	4604      	mov	r4, r0
 80066fe:	d805      	bhi.n	800670c <__ieee754_rem_pio2f+0x20>
 8006700:	2300      	movs	r3, #0
 8006702:	ed80 0a00 	vstr	s0, [r0]
 8006706:	6043      	str	r3, [r0, #4]
 8006708:	2000      	movs	r0, #0
 800670a:	e022      	b.n	8006752 <__ieee754_rem_pio2f+0x66>
 800670c:	4b82      	ldr	r3, [pc, #520]	@ (8006918 <__ieee754_rem_pio2f+0x22c>)
 800670e:	429d      	cmp	r5, r3
 8006710:	d83a      	bhi.n	8006788 <__ieee754_rem_pio2f+0x9c>
 8006712:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006716:	2e00      	cmp	r6, #0
 8006718:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800691c <__ieee754_rem_pio2f+0x230>
 800671c:	4a80      	ldr	r2, [pc, #512]	@ (8006920 <__ieee754_rem_pio2f+0x234>)
 800671e:	f023 030f 	bic.w	r3, r3, #15
 8006722:	dd18      	ble.n	8006756 <__ieee754_rem_pio2f+0x6a>
 8006724:	4293      	cmp	r3, r2
 8006726:	ee70 7a47 	vsub.f32	s15, s0, s14
 800672a:	bf09      	itett	eq
 800672c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8006924 <__ieee754_rem_pio2f+0x238>
 8006730:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006928 <__ieee754_rem_pio2f+0x23c>
 8006734:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800692c <__ieee754_rem_pio2f+0x240>
 8006738:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800673c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8006740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006744:	ed80 7a00 	vstr	s14, [r0]
 8006748:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800674c:	edc0 7a01 	vstr	s15, [r0, #4]
 8006750:	2001      	movs	r0, #1
 8006752:	b007      	add	sp, #28
 8006754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006756:	4293      	cmp	r3, r2
 8006758:	ee70 7a07 	vadd.f32	s15, s0, s14
 800675c:	bf09      	itett	eq
 800675e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8006924 <__ieee754_rem_pio2f+0x238>
 8006762:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006928 <__ieee754_rem_pio2f+0x23c>
 8006766:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800692c <__ieee754_rem_pio2f+0x240>
 800676a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800676e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006776:	ed80 7a00 	vstr	s14, [r0]
 800677a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677e:	edc0 7a01 	vstr	s15, [r0, #4]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e7e4      	b.n	8006752 <__ieee754_rem_pio2f+0x66>
 8006788:	4b69      	ldr	r3, [pc, #420]	@ (8006930 <__ieee754_rem_pio2f+0x244>)
 800678a:	429d      	cmp	r5, r3
 800678c:	d873      	bhi.n	8006876 <__ieee754_rem_pio2f+0x18a>
 800678e:	f000 f8dd 	bl	800694c <fabsf>
 8006792:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006934 <__ieee754_rem_pio2f+0x248>
 8006796:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800679a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800679e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067a6:	ee17 0a90 	vmov	r0, s15
 80067aa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800691c <__ieee754_rem_pio2f+0x230>
 80067ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 80067b2:	281f      	cmp	r0, #31
 80067b4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006928 <__ieee754_rem_pio2f+0x23c>
 80067b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067bc:	eeb1 6a47 	vneg.f32	s12, s14
 80067c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80067c4:	ee16 1a90 	vmov	r1, s13
 80067c8:	dc09      	bgt.n	80067de <__ieee754_rem_pio2f+0xf2>
 80067ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006938 <__ieee754_rem_pio2f+0x24c>)
 80067cc:	1e47      	subs	r7, r0, #1
 80067ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80067d2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80067d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80067da:	4293      	cmp	r3, r2
 80067dc:	d107      	bne.n	80067ee <__ieee754_rem_pio2f+0x102>
 80067de:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80067e2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80067e6:	2a08      	cmp	r2, #8
 80067e8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80067ec:	dc14      	bgt.n	8006818 <__ieee754_rem_pio2f+0x12c>
 80067ee:	6021      	str	r1, [r4, #0]
 80067f0:	ed94 7a00 	vldr	s14, [r4]
 80067f4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80067fe:	ed84 0a01 	vstr	s0, [r4, #4]
 8006802:	daa6      	bge.n	8006752 <__ieee754_rem_pio2f+0x66>
 8006804:	eeb1 7a47 	vneg.f32	s14, s14
 8006808:	eeb1 0a40 	vneg.f32	s0, s0
 800680c:	ed84 7a00 	vstr	s14, [r4]
 8006810:	ed84 0a01 	vstr	s0, [r4, #4]
 8006814:	4240      	negs	r0, r0
 8006816:	e79c      	b.n	8006752 <__ieee754_rem_pio2f+0x66>
 8006818:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8006924 <__ieee754_rem_pio2f+0x238>
 800681c:	eef0 6a40 	vmov.f32	s13, s0
 8006820:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006824:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006828:	eee6 7a25 	vfma.f32	s15, s12, s11
 800682c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800692c <__ieee754_rem_pio2f+0x240>
 8006830:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006834:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006838:	ee15 2a90 	vmov	r2, s11
 800683c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006840:	1a5b      	subs	r3, r3, r1
 8006842:	2b19      	cmp	r3, #25
 8006844:	dc04      	bgt.n	8006850 <__ieee754_rem_pio2f+0x164>
 8006846:	edc4 5a00 	vstr	s11, [r4]
 800684a:	eeb0 0a66 	vmov.f32	s0, s13
 800684e:	e7cf      	b.n	80067f0 <__ieee754_rem_pio2f+0x104>
 8006850:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800693c <__ieee754_rem_pio2f+0x250>
 8006854:	eeb0 0a66 	vmov.f32	s0, s13
 8006858:	eea6 0a25 	vfma.f32	s0, s12, s11
 800685c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006860:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8006940 <__ieee754_rem_pio2f+0x254>
 8006864:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006868:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800686c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006870:	ed84 7a00 	vstr	s14, [r4]
 8006874:	e7bc      	b.n	80067f0 <__ieee754_rem_pio2f+0x104>
 8006876:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800687a:	d306      	bcc.n	800688a <__ieee754_rem_pio2f+0x19e>
 800687c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006880:	edc0 7a01 	vstr	s15, [r0, #4]
 8006884:	edc0 7a00 	vstr	s15, [r0]
 8006888:	e73e      	b.n	8006708 <__ieee754_rem_pio2f+0x1c>
 800688a:	15ea      	asrs	r2, r5, #23
 800688c:	3a86      	subs	r2, #134	@ 0x86
 800688e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800689a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8006944 <__ieee754_rem_pio2f+0x258>
 800689e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068a6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80068aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068ba:	ed8d 7a04 	vstr	s14, [sp, #16]
 80068be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80068c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ca:	edcd 7a05 	vstr	s15, [sp, #20]
 80068ce:	d11e      	bne.n	800690e <__ieee754_rem_pio2f+0x222>
 80068d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80068d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d8:	bf0c      	ite	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	2302      	movne	r3, #2
 80068de:	491a      	ldr	r1, [pc, #104]	@ (8006948 <__ieee754_rem_pio2f+0x25c>)
 80068e0:	9101      	str	r1, [sp, #4]
 80068e2:	2102      	movs	r1, #2
 80068e4:	9100      	str	r1, [sp, #0]
 80068e6:	a803      	add	r0, sp, #12
 80068e8:	4621      	mov	r1, r4
 80068ea:	f000 f837 	bl	800695c <__kernel_rem_pio2f>
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	f6bf af2f 	bge.w	8006752 <__ieee754_rem_pio2f+0x66>
 80068f4:	edd4 7a00 	vldr	s15, [r4]
 80068f8:	eef1 7a67 	vneg.f32	s15, s15
 80068fc:	edc4 7a00 	vstr	s15, [r4]
 8006900:	edd4 7a01 	vldr	s15, [r4, #4]
 8006904:	eef1 7a67 	vneg.f32	s15, s15
 8006908:	edc4 7a01 	vstr	s15, [r4, #4]
 800690c:	e782      	b.n	8006814 <__ieee754_rem_pio2f+0x128>
 800690e:	2303      	movs	r3, #3
 8006910:	e7e5      	b.n	80068de <__ieee754_rem_pio2f+0x1f2>
 8006912:	bf00      	nop
 8006914:	3f490fd8 	.word	0x3f490fd8
 8006918:	4016cbe3 	.word	0x4016cbe3
 800691c:	3fc90f80 	.word	0x3fc90f80
 8006920:	3fc90fd0 	.word	0x3fc90fd0
 8006924:	37354400 	.word	0x37354400
 8006928:	37354443 	.word	0x37354443
 800692c:	2e85a308 	.word	0x2e85a308
 8006930:	43490f80 	.word	0x43490f80
 8006934:	3f22f984 	.word	0x3f22f984
 8006938:	08006fcc 	.word	0x08006fcc
 800693c:	2e85a300 	.word	0x2e85a300
 8006940:	248d3132 	.word	0x248d3132
 8006944:	43800000 	.word	0x43800000
 8006948:	0800704c 	.word	0x0800704c

0800694c <fabsf>:
 800694c:	ee10 3a10 	vmov	r3, s0
 8006950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006954:	ee00 3a10 	vmov	s0, r3
 8006958:	4770      	bx	lr
	...

0800695c <__kernel_rem_pio2f>:
 800695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006960:	ed2d 8b04 	vpush	{d8-d9}
 8006964:	b0d9      	sub	sp, #356	@ 0x164
 8006966:	4690      	mov	r8, r2
 8006968:	9001      	str	r0, [sp, #4]
 800696a:	4ab9      	ldr	r2, [pc, #740]	@ (8006c50 <__kernel_rem_pio2f+0x2f4>)
 800696c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800696e:	f118 0f04 	cmn.w	r8, #4
 8006972:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8006976:	460f      	mov	r7, r1
 8006978:	f103 3bff 	add.w	fp, r3, #4294967295
 800697c:	db27      	blt.n	80069ce <__kernel_rem_pio2f+0x72>
 800697e:	f1b8 0203 	subs.w	r2, r8, #3
 8006982:	bf48      	it	mi
 8006984:	f108 0204 	addmi.w	r2, r8, #4
 8006988:	10d2      	asrs	r2, r2, #3
 800698a:	1c55      	adds	r5, r2, #1
 800698c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800698e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8006c60 <__kernel_rem_pio2f+0x304>
 8006992:	00e8      	lsls	r0, r5, #3
 8006994:	eba2 060b 	sub.w	r6, r2, fp
 8006998:	9002      	str	r0, [sp, #8]
 800699a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800699e:	eb0a 0c0b 	add.w	ip, sl, fp
 80069a2:	ac1c      	add	r4, sp, #112	@ 0x70
 80069a4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80069a8:	2000      	movs	r0, #0
 80069aa:	4560      	cmp	r0, ip
 80069ac:	dd11      	ble.n	80069d2 <__kernel_rem_pio2f+0x76>
 80069ae:	a91c      	add	r1, sp, #112	@ 0x70
 80069b0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80069b4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80069b8:	f04f 0c00 	mov.w	ip, #0
 80069bc:	45d4      	cmp	ip, sl
 80069be:	dc27      	bgt.n	8006a10 <__kernel_rem_pio2f+0xb4>
 80069c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80069c4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8006c60 <__kernel_rem_pio2f+0x304>
 80069c8:	4606      	mov	r6, r0
 80069ca:	2400      	movs	r4, #0
 80069cc:	e016      	b.n	80069fc <__kernel_rem_pio2f+0xa0>
 80069ce:	2200      	movs	r2, #0
 80069d0:	e7db      	b.n	800698a <__kernel_rem_pio2f+0x2e>
 80069d2:	42c6      	cmn	r6, r0
 80069d4:	bf5d      	ittte	pl
 80069d6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80069da:	ee07 1a90 	vmovpl	s15, r1
 80069de:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80069e2:	eef0 7a47 	vmovmi.f32	s15, s14
 80069e6:	ece4 7a01 	vstmia	r4!, {s15}
 80069ea:	3001      	adds	r0, #1
 80069ec:	e7dd      	b.n	80069aa <__kernel_rem_pio2f+0x4e>
 80069ee:	ecfe 6a01 	vldmia	lr!, {s13}
 80069f2:	ed96 7a00 	vldr	s14, [r6]
 80069f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80069fa:	3401      	adds	r4, #1
 80069fc:	455c      	cmp	r4, fp
 80069fe:	f1a6 0604 	sub.w	r6, r6, #4
 8006a02:	ddf4      	ble.n	80069ee <__kernel_rem_pio2f+0x92>
 8006a04:	ece9 7a01 	vstmia	r9!, {s15}
 8006a08:	f10c 0c01 	add.w	ip, ip, #1
 8006a0c:	3004      	adds	r0, #4
 8006a0e:	e7d5      	b.n	80069bc <__kernel_rem_pio2f+0x60>
 8006a10:	a908      	add	r1, sp, #32
 8006a12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a16:	9104      	str	r1, [sp, #16]
 8006a18:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006a1a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8006c5c <__kernel_rem_pio2f+0x300>
 8006a1e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8006c58 <__kernel_rem_pio2f+0x2fc>
 8006a22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006a26:	9203      	str	r2, [sp, #12]
 8006a28:	4654      	mov	r4, sl
 8006a2a:	00a2      	lsls	r2, r4, #2
 8006a2c:	9205      	str	r2, [sp, #20]
 8006a2e:	aa58      	add	r2, sp, #352	@ 0x160
 8006a30:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006a34:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8006a38:	a944      	add	r1, sp, #272	@ 0x110
 8006a3a:	aa08      	add	r2, sp, #32
 8006a3c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006a40:	4694      	mov	ip, r2
 8006a42:	4626      	mov	r6, r4
 8006a44:	2e00      	cmp	r6, #0
 8006a46:	f1a0 0004 	sub.w	r0, r0, #4
 8006a4a:	dc4c      	bgt.n	8006ae6 <__kernel_rem_pio2f+0x18a>
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a52:	f000 f9f5 	bl	8006e40 <scalbnf>
 8006a56:	eeb0 8a40 	vmov.f32	s16, s0
 8006a5a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8006a5e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006a62:	f000 fa53 	bl	8006f0c <floorf>
 8006a66:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8006a6a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a74:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006a78:	ee17 9a90 	vmov	r9, s15
 8006a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a80:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006a84:	dd41      	ble.n	8006b0a <__kernel_rem_pio2f+0x1ae>
 8006a86:	f104 3cff 	add.w	ip, r4, #4294967295
 8006a8a:	a908      	add	r1, sp, #32
 8006a8c:	f1c5 0e08 	rsb	lr, r5, #8
 8006a90:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8006a94:	fa46 f00e 	asr.w	r0, r6, lr
 8006a98:	4481      	add	r9, r0
 8006a9a:	fa00 f00e 	lsl.w	r0, r0, lr
 8006a9e:	1a36      	subs	r6, r6, r0
 8006aa0:	f1c5 0007 	rsb	r0, r5, #7
 8006aa4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8006aa8:	4106      	asrs	r6, r0
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	dd3c      	ble.n	8006b28 <__kernel_rem_pio2f+0x1cc>
 8006aae:	f04f 0e00 	mov.w	lr, #0
 8006ab2:	f109 0901 	add.w	r9, r9, #1
 8006ab6:	4670      	mov	r0, lr
 8006ab8:	4574      	cmp	r4, lr
 8006aba:	dc68      	bgt.n	8006b8e <__kernel_rem_pio2f+0x232>
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	dd03      	ble.n	8006ac8 <__kernel_rem_pio2f+0x16c>
 8006ac0:	2d01      	cmp	r5, #1
 8006ac2:	d074      	beq.n	8006bae <__kernel_rem_pio2f+0x252>
 8006ac4:	2d02      	cmp	r5, #2
 8006ac6:	d07d      	beq.n	8006bc4 <__kernel_rem_pio2f+0x268>
 8006ac8:	2e02      	cmp	r6, #2
 8006aca:	d12d      	bne.n	8006b28 <__kernel_rem_pio2f+0x1cc>
 8006acc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006ad0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006ad4:	b340      	cbz	r0, 8006b28 <__kernel_rem_pio2f+0x1cc>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	9306      	str	r3, [sp, #24]
 8006ada:	f000 f9b1 	bl	8006e40 <scalbnf>
 8006ade:	9b06      	ldr	r3, [sp, #24]
 8006ae0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006ae4:	e020      	b.n	8006b28 <__kernel_rem_pio2f+0x1cc>
 8006ae6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006aea:	3e01      	subs	r6, #1
 8006aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006af4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006af8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006afc:	ecac 0a01 	vstmia	ip!, {s0}
 8006b00:	ed90 0a00 	vldr	s0, [r0]
 8006b04:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006b08:	e79c      	b.n	8006a44 <__kernel_rem_pio2f+0xe8>
 8006b0a:	d105      	bne.n	8006b18 <__kernel_rem_pio2f+0x1bc>
 8006b0c:	1e60      	subs	r0, r4, #1
 8006b0e:	a908      	add	r1, sp, #32
 8006b10:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006b14:	11f6      	asrs	r6, r6, #7
 8006b16:	e7c8      	b.n	8006aaa <__kernel_rem_pio2f+0x14e>
 8006b18:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006b1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b24:	da31      	bge.n	8006b8a <__kernel_rem_pio2f+0x22e>
 8006b26:	2600      	movs	r6, #0
 8006b28:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b30:	f040 8098 	bne.w	8006c64 <__kernel_rem_pio2f+0x308>
 8006b34:	1e60      	subs	r0, r4, #1
 8006b36:	2200      	movs	r2, #0
 8006b38:	4550      	cmp	r0, sl
 8006b3a:	da4b      	bge.n	8006bd4 <__kernel_rem_pio2f+0x278>
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	d065      	beq.n	8006c0c <__kernel_rem_pio2f+0x2b0>
 8006b40:	3c01      	subs	r4, #1
 8006b42:	ab08      	add	r3, sp, #32
 8006b44:	3d08      	subs	r5, #8
 8006b46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f8      	beq.n	8006b40 <__kernel_rem_pio2f+0x1e4>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006b54:	f000 f974 	bl	8006e40 <scalbnf>
 8006b58:	1c63      	adds	r3, r4, #1
 8006b5a:	aa44      	add	r2, sp, #272	@ 0x110
 8006b5c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006c5c <__kernel_rem_pio2f+0x300>
 8006b60:	0099      	lsls	r1, r3, #2
 8006b62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006b66:	4623      	mov	r3, r4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f280 80a9 	bge.w	8006cc0 <__kernel_rem_pio2f+0x364>
 8006b6e:	4623      	mov	r3, r4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f2c0 80c7 	blt.w	8006d04 <__kernel_rem_pio2f+0x3a8>
 8006b76:	aa44      	add	r2, sp, #272	@ 0x110
 8006b78:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006b7c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8006c54 <__kernel_rem_pio2f+0x2f8>
 8006b80:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006c60 <__kernel_rem_pio2f+0x304>
 8006b84:	2000      	movs	r0, #0
 8006b86:	1ae2      	subs	r2, r4, r3
 8006b88:	e0b1      	b.n	8006cee <__kernel_rem_pio2f+0x392>
 8006b8a:	2602      	movs	r6, #2
 8006b8c:	e78f      	b.n	8006aae <__kernel_rem_pio2f+0x152>
 8006b8e:	f852 1b04 	ldr.w	r1, [r2], #4
 8006b92:	b948      	cbnz	r0, 8006ba8 <__kernel_rem_pio2f+0x24c>
 8006b94:	b121      	cbz	r1, 8006ba0 <__kernel_rem_pio2f+0x244>
 8006b96:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8006b9a:	f842 1c04 	str.w	r1, [r2, #-4]
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	f10e 0e01 	add.w	lr, lr, #1
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	e787      	b.n	8006ab8 <__kernel_rem_pio2f+0x15c>
 8006ba8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006bac:	e7f5      	b.n	8006b9a <__kernel_rem_pio2f+0x23e>
 8006bae:	f104 3cff 	add.w	ip, r4, #4294967295
 8006bb2:	aa08      	add	r2, sp, #32
 8006bb4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006bb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bbc:	a908      	add	r1, sp, #32
 8006bbe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8006bc2:	e781      	b.n	8006ac8 <__kernel_rem_pio2f+0x16c>
 8006bc4:	f104 3cff 	add.w	ip, r4, #4294967295
 8006bc8:	aa08      	add	r2, sp, #32
 8006bca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006bce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006bd2:	e7f3      	b.n	8006bbc <__kernel_rem_pio2f+0x260>
 8006bd4:	a908      	add	r1, sp, #32
 8006bd6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006bda:	3801      	subs	r0, #1
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	e7ab      	b.n	8006b38 <__kernel_rem_pio2f+0x1dc>
 8006be0:	3201      	adds	r2, #1
 8006be2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	d0fa      	beq.n	8006be0 <__kernel_rem_pio2f+0x284>
 8006bea:	9905      	ldr	r1, [sp, #20]
 8006bec:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8006bf0:	eb0d 0001 	add.w	r0, sp, r1
 8006bf4:	18e6      	adds	r6, r4, r3
 8006bf6:	a91c      	add	r1, sp, #112	@ 0x70
 8006bf8:	f104 0c01 	add.w	ip, r4, #1
 8006bfc:	384c      	subs	r0, #76	@ 0x4c
 8006bfe:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006c02:	4422      	add	r2, r4
 8006c04:	4562      	cmp	r2, ip
 8006c06:	da04      	bge.n	8006c12 <__kernel_rem_pio2f+0x2b6>
 8006c08:	4614      	mov	r4, r2
 8006c0a:	e70e      	b.n	8006a2a <__kernel_rem_pio2f+0xce>
 8006c0c:	9804      	ldr	r0, [sp, #16]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	e7e7      	b.n	8006be2 <__kernel_rem_pio2f+0x286>
 8006c12:	9903      	ldr	r1, [sp, #12]
 8006c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006c18:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006c1c:	9105      	str	r1, [sp, #20]
 8006c1e:	ee07 1a90 	vmov	s15, r1
 8006c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c26:	2400      	movs	r4, #0
 8006c28:	ece6 7a01 	vstmia	r6!, {s15}
 8006c2c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006c60 <__kernel_rem_pio2f+0x304>
 8006c30:	46b1      	mov	r9, r6
 8006c32:	455c      	cmp	r4, fp
 8006c34:	dd04      	ble.n	8006c40 <__kernel_rem_pio2f+0x2e4>
 8006c36:	ece0 7a01 	vstmia	r0!, {s15}
 8006c3a:	f10c 0c01 	add.w	ip, ip, #1
 8006c3e:	e7e1      	b.n	8006c04 <__kernel_rem_pio2f+0x2a8>
 8006c40:	ecfe 6a01 	vldmia	lr!, {s13}
 8006c44:	ed39 7a01 	vldmdb	r9!, {s14}
 8006c48:	3401      	adds	r4, #1
 8006c4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006c4e:	e7f0      	b.n	8006c32 <__kernel_rem_pio2f+0x2d6>
 8006c50:	08007390 	.word	0x08007390
 8006c54:	08007364 	.word	0x08007364
 8006c58:	43800000 	.word	0x43800000
 8006c5c:	3b800000 	.word	0x3b800000
 8006c60:	00000000 	.word	0x00000000
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	eeb0 0a48 	vmov.f32	s0, s16
 8006c6a:	eba3 0008 	sub.w	r0, r3, r8
 8006c6e:	f000 f8e7 	bl	8006e40 <scalbnf>
 8006c72:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006c58 <__kernel_rem_pio2f+0x2fc>
 8006c76:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7e:	db19      	blt.n	8006cb4 <__kernel_rem_pio2f+0x358>
 8006c80:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8006c5c <__kernel_rem_pio2f+0x300>
 8006c84:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006c88:	aa08      	add	r2, sp, #32
 8006c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c8e:	3508      	adds	r5, #8
 8006c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c94:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c9c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006ca0:	ee10 3a10 	vmov	r3, s0
 8006ca4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006ca8:	ee17 3a90 	vmov	r3, s15
 8006cac:	3401      	adds	r4, #1
 8006cae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006cb2:	e74c      	b.n	8006b4e <__kernel_rem_pio2f+0x1f2>
 8006cb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006cb8:	aa08      	add	r2, sp, #32
 8006cba:	ee10 3a10 	vmov	r3, s0
 8006cbe:	e7f6      	b.n	8006cae <__kernel_rem_pio2f+0x352>
 8006cc0:	a808      	add	r0, sp, #32
 8006cc2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006cc6:	9001      	str	r0, [sp, #4]
 8006cc8:	ee07 0a90 	vmov	s15, r0
 8006ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006cd6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006cda:	ed62 7a01 	vstmdb	r2!, {s15}
 8006cde:	e743      	b.n	8006b68 <__kernel_rem_pio2f+0x20c>
 8006ce0:	ecfc 6a01 	vldmia	ip!, {s13}
 8006ce4:	ecb5 7a01 	vldmia	r5!, {s14}
 8006ce8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006cec:	3001      	adds	r0, #1
 8006cee:	4550      	cmp	r0, sl
 8006cf0:	dc01      	bgt.n	8006cf6 <__kernel_rem_pio2f+0x39a>
 8006cf2:	4282      	cmp	r2, r0
 8006cf4:	daf4      	bge.n	8006ce0 <__kernel_rem_pio2f+0x384>
 8006cf6:	a858      	add	r0, sp, #352	@ 0x160
 8006cf8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006cfc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006d00:	3b01      	subs	r3, #1
 8006d02:	e735      	b.n	8006b70 <__kernel_rem_pio2f+0x214>
 8006d04:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	dc09      	bgt.n	8006d1e <__kernel_rem_pio2f+0x3c2>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dc2b      	bgt.n	8006d66 <__kernel_rem_pio2f+0x40a>
 8006d0e:	d044      	beq.n	8006d9a <__kernel_rem_pio2f+0x43e>
 8006d10:	f009 0007 	and.w	r0, r9, #7
 8006d14:	b059      	add	sp, #356	@ 0x164
 8006d16:	ecbd 8b04 	vpop	{d8-d9}
 8006d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d1f5      	bne.n	8006d10 <__kernel_rem_pio2f+0x3b4>
 8006d24:	aa30      	add	r2, sp, #192	@ 0xc0
 8006d26:	1f0b      	subs	r3, r1, #4
 8006d28:	4413      	add	r3, r2
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f1a2 0204 	sub.w	r2, r2, #4
 8006d34:	dc52      	bgt.n	8006ddc <__kernel_rem_pio2f+0x480>
 8006d36:	4622      	mov	r2, r4
 8006d38:	2a01      	cmp	r2, #1
 8006d3a:	f1a3 0304 	sub.w	r3, r3, #4
 8006d3e:	dc5d      	bgt.n	8006dfc <__kernel_rem_pio2f+0x4a0>
 8006d40:	ab30      	add	r3, sp, #192	@ 0xc0
 8006d42:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8006c60 <__kernel_rem_pio2f+0x304>
 8006d46:	440b      	add	r3, r1
 8006d48:	2c01      	cmp	r4, #1
 8006d4a:	dc67      	bgt.n	8006e1c <__kernel_rem_pio2f+0x4c0>
 8006d4c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006d50:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8006d54:	2e00      	cmp	r6, #0
 8006d56:	d167      	bne.n	8006e28 <__kernel_rem_pio2f+0x4cc>
 8006d58:	edc7 6a00 	vstr	s13, [r7]
 8006d5c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006d60:	edc7 7a02 	vstr	s15, [r7, #8]
 8006d64:	e7d4      	b.n	8006d10 <__kernel_rem_pio2f+0x3b4>
 8006d66:	ab30      	add	r3, sp, #192	@ 0xc0
 8006d68:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8006c60 <__kernel_rem_pio2f+0x304>
 8006d6c:	440b      	add	r3, r1
 8006d6e:	4622      	mov	r2, r4
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	da24      	bge.n	8006dbe <__kernel_rem_pio2f+0x462>
 8006d74:	b34e      	cbz	r6, 8006dca <__kernel_rem_pio2f+0x46e>
 8006d76:	eef1 7a47 	vneg.f32	s15, s14
 8006d7a:	edc7 7a00 	vstr	s15, [r7]
 8006d7e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8006d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d86:	aa31      	add	r2, sp, #196	@ 0xc4
 8006d88:	2301      	movs	r3, #1
 8006d8a:	429c      	cmp	r4, r3
 8006d8c:	da20      	bge.n	8006dd0 <__kernel_rem_pio2f+0x474>
 8006d8e:	b10e      	cbz	r6, 8006d94 <__kernel_rem_pio2f+0x438>
 8006d90:	eef1 7a67 	vneg.f32	s15, s15
 8006d94:	edc7 7a01 	vstr	s15, [r7, #4]
 8006d98:	e7ba      	b.n	8006d10 <__kernel_rem_pio2f+0x3b4>
 8006d9a:	ab30      	add	r3, sp, #192	@ 0xc0
 8006d9c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8006c60 <__kernel_rem_pio2f+0x304>
 8006da0:	440b      	add	r3, r1
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	da05      	bge.n	8006db2 <__kernel_rem_pio2f+0x456>
 8006da6:	b10e      	cbz	r6, 8006dac <__kernel_rem_pio2f+0x450>
 8006da8:	eef1 7a67 	vneg.f32	s15, s15
 8006dac:	edc7 7a00 	vstr	s15, [r7]
 8006db0:	e7ae      	b.n	8006d10 <__kernel_rem_pio2f+0x3b4>
 8006db2:	ed33 7a01 	vldmdb	r3!, {s14}
 8006db6:	3c01      	subs	r4, #1
 8006db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dbc:	e7f1      	b.n	8006da2 <__kernel_rem_pio2f+0x446>
 8006dbe:	ed73 7a01 	vldmdb	r3!, {s15}
 8006dc2:	3a01      	subs	r2, #1
 8006dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006dc8:	e7d2      	b.n	8006d70 <__kernel_rem_pio2f+0x414>
 8006dca:	eef0 7a47 	vmov.f32	s15, s14
 8006dce:	e7d4      	b.n	8006d7a <__kernel_rem_pio2f+0x41e>
 8006dd0:	ecb2 7a01 	vldmia	r2!, {s14}
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dda:	e7d6      	b.n	8006d8a <__kernel_rem_pio2f+0x42e>
 8006ddc:	edd2 7a00 	vldr	s15, [r2]
 8006de0:	edd2 6a01 	vldr	s13, [r2, #4]
 8006de4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006de8:	3801      	subs	r0, #1
 8006dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006dee:	ed82 7a00 	vstr	s14, [r2]
 8006df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df6:	edc2 7a01 	vstr	s15, [r2, #4]
 8006dfa:	e798      	b.n	8006d2e <__kernel_rem_pio2f+0x3d2>
 8006dfc:	edd3 7a00 	vldr	s15, [r3]
 8006e00:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e04:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006e08:	3a01      	subs	r2, #1
 8006e0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e0e:	ed83 7a00 	vstr	s14, [r3]
 8006e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e16:	edc3 7a01 	vstr	s15, [r3, #4]
 8006e1a:	e78d      	b.n	8006d38 <__kernel_rem_pio2f+0x3dc>
 8006e1c:	ed33 7a01 	vldmdb	r3!, {s14}
 8006e20:	3c01      	subs	r4, #1
 8006e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e26:	e78f      	b.n	8006d48 <__kernel_rem_pio2f+0x3ec>
 8006e28:	eef1 6a66 	vneg.f32	s13, s13
 8006e2c:	eeb1 7a47 	vneg.f32	s14, s14
 8006e30:	edc7 6a00 	vstr	s13, [r7]
 8006e34:	ed87 7a01 	vstr	s14, [r7, #4]
 8006e38:	eef1 7a67 	vneg.f32	s15, s15
 8006e3c:	e790      	b.n	8006d60 <__kernel_rem_pio2f+0x404>
 8006e3e:	bf00      	nop

08006e40 <scalbnf>:
 8006e40:	ee10 3a10 	vmov	r3, s0
 8006e44:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006e48:	d02b      	beq.n	8006ea2 <scalbnf+0x62>
 8006e4a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006e4e:	d302      	bcc.n	8006e56 <scalbnf+0x16>
 8006e50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e54:	4770      	bx	lr
 8006e56:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006e5a:	d123      	bne.n	8006ea4 <scalbnf+0x64>
 8006e5c:	4b24      	ldr	r3, [pc, #144]	@ (8006ef0 <scalbnf+0xb0>)
 8006e5e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006ef4 <scalbnf+0xb4>
 8006e62:	4298      	cmp	r0, r3
 8006e64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006e68:	db17      	blt.n	8006e9a <scalbnf+0x5a>
 8006e6a:	ee10 3a10 	vmov	r3, s0
 8006e6e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006e72:	3a19      	subs	r2, #25
 8006e74:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006e78:	4288      	cmp	r0, r1
 8006e7a:	dd15      	ble.n	8006ea8 <scalbnf+0x68>
 8006e7c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006ef8 <scalbnf+0xb8>
 8006e80:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006efc <scalbnf+0xbc>
 8006e84:	ee10 3a10 	vmov	r3, s0
 8006e88:	eeb0 7a67 	vmov.f32	s14, s15
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bfb8      	it	lt
 8006e90:	eef0 7a66 	vmovlt.f32	s15, s13
 8006e94:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006e98:	4770      	bx	lr
 8006e9a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006f00 <scalbnf+0xc0>
 8006e9e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006ea2:	4770      	bx	lr
 8006ea4:	0dd2      	lsrs	r2, r2, #23
 8006ea6:	e7e5      	b.n	8006e74 <scalbnf+0x34>
 8006ea8:	4410      	add	r0, r2
 8006eaa:	28fe      	cmp	r0, #254	@ 0xfe
 8006eac:	dce6      	bgt.n	8006e7c <scalbnf+0x3c>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	dd06      	ble.n	8006ec0 <scalbnf+0x80>
 8006eb2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006eb6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006eba:	ee00 3a10 	vmov	s0, r3
 8006ebe:	4770      	bx	lr
 8006ec0:	f110 0f16 	cmn.w	r0, #22
 8006ec4:	da09      	bge.n	8006eda <scalbnf+0x9a>
 8006ec6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006f00 <scalbnf+0xc0>
 8006eca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006f04 <scalbnf+0xc4>
 8006ece:	ee10 3a10 	vmov	r3, s0
 8006ed2:	eeb0 7a67 	vmov.f32	s14, s15
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	e7d9      	b.n	8006e8e <scalbnf+0x4e>
 8006eda:	3019      	adds	r0, #25
 8006edc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006ee0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006ee4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006f08 <scalbnf+0xc8>
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	e7d7      	b.n	8006e9e <scalbnf+0x5e>
 8006eee:	bf00      	nop
 8006ef0:	ffff3cb0 	.word	0xffff3cb0
 8006ef4:	4c000000 	.word	0x4c000000
 8006ef8:	7149f2ca 	.word	0x7149f2ca
 8006efc:	f149f2ca 	.word	0xf149f2ca
 8006f00:	0da24260 	.word	0x0da24260
 8006f04:	8da24260 	.word	0x8da24260
 8006f08:	33000000 	.word	0x33000000

08006f0c <floorf>:
 8006f0c:	ee10 3a10 	vmov	r3, s0
 8006f10:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006f14:	3a7f      	subs	r2, #127	@ 0x7f
 8006f16:	2a16      	cmp	r2, #22
 8006f18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006f1c:	dc2b      	bgt.n	8006f76 <floorf+0x6a>
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	da12      	bge.n	8006f48 <floorf+0x3c>
 8006f22:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006f88 <floorf+0x7c>
 8006f26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f32:	dd06      	ble.n	8006f42 <floorf+0x36>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	da24      	bge.n	8006f82 <floorf+0x76>
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <floorf+0x80>)
 8006f3c:	bf08      	it	eq
 8006f3e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8006f42:	ee00 3a10 	vmov	s0, r3
 8006f46:	4770      	bx	lr
 8006f48:	4911      	ldr	r1, [pc, #68]	@ (8006f90 <floorf+0x84>)
 8006f4a:	4111      	asrs	r1, r2
 8006f4c:	420b      	tst	r3, r1
 8006f4e:	d0fa      	beq.n	8006f46 <floorf+0x3a>
 8006f50:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006f88 <floorf+0x7c>
 8006f54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f60:	ddef      	ble.n	8006f42 <floorf+0x36>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bfbe      	ittt	lt
 8006f66:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006f6a:	fa40 f202 	asrlt.w	r2, r0, r2
 8006f6e:	189b      	addlt	r3, r3, r2
 8006f70:	ea23 0301 	bic.w	r3, r3, r1
 8006f74:	e7e5      	b.n	8006f42 <floorf+0x36>
 8006f76:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006f7a:	d3e4      	bcc.n	8006f46 <floorf+0x3a>
 8006f7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f80:	4770      	bx	lr
 8006f82:	2300      	movs	r3, #0
 8006f84:	e7dd      	b.n	8006f42 <floorf+0x36>
 8006f86:	bf00      	nop
 8006f88:	7149f2ca 	.word	0x7149f2ca
 8006f8c:	bf800000 	.word	0xbf800000
 8006f90:	007fffff 	.word	0x007fffff

08006f94 <_init>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	bf00      	nop
 8006f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9a:	bc08      	pop	{r3}
 8006f9c:	469e      	mov	lr, r3
 8006f9e:	4770      	bx	lr

08006fa0 <_fini>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	bf00      	nop
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr
